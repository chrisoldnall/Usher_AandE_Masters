summary(glm_CoviddatesexageSIMDdaytypehourHBTime_predictions)
#Loading population estimate (only till 2022) csv file
Scotpopulation2018to2022Covidglmplot <- read_csv(here("Rawdata", "20240809Popestimate_HB2019_1981to2022.csv"))
#Filtering out total Scottish estimates (HB S92000003) for each year, leaving just individual HBs in the list
Scotpopulation2018to2022Covidglmplot <- Scotpopulation2018to2022Covidglmplot %>%
filter(!HB%in%"S92000003")
#Excluding population by sex, only the totals for each HB each year
Scotpopulation2018to2022Covidglmplot <- Scotpopulation2018to2022Covidglmplot %>%
filter(Sex=="All")
#Only getting the total population estimates for 2018-2022
Scotpopulation2018to2022Covidglmplot <- Scotpopulation2018to2022Covidglmplot %>%
group_by(Year) %>%
summarise(AllAges=sum(AllAges)) %>%
filter(Year=="2018"|Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022") %>%
select(Year, AllAges)
#Selecting only the columns needed for glm plot and adding a column for year to join with the population data
Covid_monthlyae_glmpropglmplot <- Covid_monthlyae_glmprop %>%
select(date, NumberOfAttendances)
Covid_monthlyae_glmpropglmplot$Year <- format(as.Date(Covid_monthlyae_glmprop$date), format="%Y/%m/%d","%Y")
View(Covid_monthlyae_glmpropglmplot)
str(Covid_monthlyae_glmpropglmplot )
Covid_monthlyae_glmpropglmplot$Year <- format(as.Date(Covid_monthlyae_glmprop$date), format=("%Y/%m/%d","%Y"))
#ERROR MESSAGE HERE
Covid_monthlyae_glmpropglmplot$Year <- format(as.Date(Covid_monthlyae_glmprop$date), format="%Y/%m/%d","%Y")
#ERROR MESSAGE HERE
Covid_monthlyae_glmpropglmplot$Year <- format(Covid_monthlyae_glmprop$date, format="%Y/%m/%d","%Y")
View(Covid_monthlyae_glmpropglmplot)
Covid_monthlyae_glmpropglmplot$Year <- as.numeric(format(Covid_monthlyae_glmprop$date,'%Y'))
View(Covid_monthlyae_glmpropglmplot)
#combining population data with attendance data to create the glm plot
Covid_monthlyae_glmpropglmplot <-
merge(Scotpopulation2018to2022Covidglmplot, Covid_monthlyae_glmpropglmplot, by=c("Year"))
View(Covid_monthlyae_glmpropglmplot)
#combining the glm predictions for glm_xxx_prediction data with actual
Covid_monthlyae_glmpropglmplot <- Covid_monthlyae_glmpropglmplot %>%
mutate("glmCoviddateprediction" = glm_Coviddate_predictions/AllAges,
"glmCoviddatesexprediction" = glm_Coviddatesex_predictions/AllAges,
"glmCoviddatesexageprediction" = glm_Coviddatesexage_predictions/AllAges,
"glmCoviddatesexageSIMDprediction" = glm_CoviddatesexageSIMD_predictions/AllAges,
"glmCoviddatesexageSIMDdayprediction" = glm_CoviddatesexageSIMDday_predictions/AllAges,
"glmCoviddatesexageSIMDdaytypeprediction" = glm_CoviddatesexageSIMDdaytype_predictions/AllAges,
"glmCoviddatesexageSIMDdaytypehourprediction" = glm_CoviddatesexageSIMDdaytypehour_predictions/AllAges,
"glmCoviddatesexageSIMDdaytypehourHBprediction" = glm_CoviddatesexageSIMDdaytypehourHB_predictions/AllAges,
"glmCoviddatesexageSIMDdaytypehourHBmonthprediction" = glm_CoviddatesexageSIMDdaytypehourHBmonth_predictions/AllAges,
"glmCoviddatesexageSIMDdaytypehourHBTimeprediction" = glm_CoviddatesexageSIMDdaytypehourHBTime_predictions/AllAges,
"rates" = NumberOfAttendances/AllAges)
glmCoviddateprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddateprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddateprediction), color = "yellow4")
glmCoviddateprediction
save_plot("Output/glmCoviddateprediction.svg", fig = glmCoviddateprediction, width = 5, height = 5)
glmCoviddatesexprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddateprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexprediction), color = "red")
glmCoviddatesexprediction
save_plot("Output/glmCoviddatesexprediction.svg", fig = glmCoviddatesexprediction, width = 5, height = 5)
glmCoviddatesexageprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageprediction), color = "blue")
glmCoviddatesexageprediction
save_plot("Output/glmCoviddatesexageprediction.svg", fig = glmCoviddatesexageprediction, width = 5, height = 5)
glmCoviddatesexageSIMDprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageSIMDprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageSIMDprediction), color = "green")
save_plot("Output/glmCoviddatesexageSIMDprediction.svg", fig = glmCoviddatesexageSIMDprediction, width = 5, height = 5)
glmCoviddatesexageSIMDdayprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageSIMDdayprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageSIMDdayprediction), color = "yellow")
save_plot("Output/glmCoviddatesexageSIMDdayprediction.svg", fig = glmCoviddatesexageSIMDdayprediction, width = 5, height = 5)
glmCoviddatesexageSIMDdaytypeprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageSIMDdaytypeprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageSIMDdaytypeprediction), color = "orange")
save_plot("Output/glmCoviddatesexageSIMDdaytypeprediction.svg", fig = glmCoviddatesexageSIMDdaytypeprediction, width = 5, height = 5)
glmCoviddatesexageSIMDdaytypehourprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageSIMDdaytypehourprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageSIMDdaytypehourprediction), color = "purple")
save_plot("Output/glmCoviddatesexageSIMDdaytypehourprediction.svg", fig = glmCoviddatesexageSIMDdaytypehourprediction, width = 5, height = 5)
glmCoviddatesexageSIMDdaytypehourHBprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageSIMDdaytypehourHBprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageSIMDdaytypehourHBprediction), color = "brown")
save_plot("Output/glmCoviddatesexageSIMDdaytypehourHBprediction.svg", fig = glmCoviddatesexageSIMDdaytypehourHBprediction, width = 5, height = 5)
glmCoviddatesexageSIMDdaytypehourHBmonthprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageSIMDdaytypehourHBmonthprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageSIMDdaytypehourHBmonthprediction), color = "salmon")
save_plot("Output/glmCoviddatesexageSIMDdaytypehourHBmonthprediction.svg", fig = glmCoviddatesexageSIMDdaytypehourHBmonthprediction, width = 5, height = 5)
glmCoviddatesexageSIMDdaytypehourHBTimeprediction <- ggplot(data=Covid_monthlyae_glmpropglmplot, aes(x=date))+
labs(x="Time", y= "Attendance rate",
#title = "glmCoviddatesexageSIMDdaytypehourHBTimeprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmCoviddatesexageSIMDdaytypehourHBTimeprediction), color = "magenta")
save_plot("Output/glmCoviddatesexageSIMDdaytypehourHBTimeprediction.svg", fig = glmCoviddatesexageSIMDdaytypehourHBTimeprediction, width = 5, height = 5)
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
library(pscl)
glm_CoviddatesexageSIMDdaytypehourHBmonth_aic <- AIC(Covidglm_CoviddatesexageSIMDdaytypehourHBmonth)
glm_CoviddatesexageSIMDdaytypehourHBmonth_aic
glm_CoviddatesexageSIMDdaytypehourHBTime_aic
#McFadden's R-squared
#with reference to https://www.statology.org/glm-r-squared/
#method one using the package pscl
pR2(Covidglm_CoviddatesexageSIMDdaytypehourHBmonth)['McFadden']
pR2(Covidglm_CoviddatesexageSIMDdaytypehourHBTime)['McFadden']
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
#Loading A&E monthly attendance and waiting times csv file
Covid_monthlyae_activitydescrip <- read_csv(here("Rawdata", "monthlyae_activity_202406.csv"))
#Eyeballing the dataset
view(Covid_monthlyae_activitydescrip)
head(Covid_monthlyae_activitydescrip)
str(Covid_monthlyae_activitydescrip)
summary(Covid_monthlyae_activitydescrip)
#Count number of ED and MIU/Other sites
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="ED") %>% count(LocationName)
#Count number of ED and MIU/Other sites
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="ED") %>% count(TreatmentLocation)
#Count number of ED and MIU/Other sites
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="Emergency Department") %>% count(TreatmentLocation)
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="Minor Injury Unit or Other") %>% count(TreatmentLocation)
#Entry with the lowest and highest NumberOfAttendancesAll
Covid_monthlyae_activitydescrip[which.min(Covid_monthlyae_activitydescrip$NumberOfAttendancesAll),]
Covid_monthlyae_activitydescrip[which.max(Covid_monthlyae_activitydescrip$NumberOfAttendancesAll),]
#Entry with the lowest and highest PercentageWithin4HoursAll
Covid_monthlyae_activitydescrip[which.min(Covid_monthlyae_activitydescrip$PercentageWithin4HoursAll),]
Covid_monthlyae_activitydescrip[which.max(Covid_monthlyae_activitydescrip$PercentageWithin4HoursAll),]
#Summary split by ED and MIU/Other
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Emergency Department')%>%summary()
Covid_monthlyae_activitydescrip %>%
summarise(mean=mean(NumberOfAttendancesAll),
median = median(NumberOfAttendancesAll),
sd=sd(NumberOfAttendancesAll),
min=min(NumberOfAttendancesAll),
max=max(NumberOfAttendancesAll),
var=var(NumberOfAttendancesAll))
#To create a date column
#creating a new column for Year, monthnumeric and day using data from the Month column
Covid_monthlyae_activitydescrip$Year <- substr(Covid_monthlyae_activitydescrip$Month, 1,4)
Covid_monthlyae_activitydescrip$monthnumeric <- substr(Covid_monthlyae_activitydescrip$Month, 5,6)
Covid_monthlyae_activitydescrip$day <- "01"
#converting from character to numeric variable
Covid_monthlyae_activitydescrip$Year <- as.numeric(Covid_monthlyae_activitydescrip$Year)
Covid_monthlyae_activitydescrip$monthnumeric <- as.numeric(Covid_monthlyae_activitydescrip$monthnumeric)
Covid_monthlyae_activitydescrip$day <- as.numeric(Covid_monthlyae_activitydescrip$day)
View(Covid_monthlyae_activitydescrip)
#making a date column using the Year, monthnumeric and day columns
Covid_monthlyae_activitydescrip<- Covid_monthlyae_activitydescrip %>%
mutate(date=make_date(Year, monthnumeric, day))
View(Covid_monthlyae_activitydescrip)
#Summary for the years till Dec 2022 (period between 2007-07-01 to 2022-12-31)
Covid_monthlyae_activitydescrip %>%filter(between(date, as.Date('2007-07-01'), as.Date('2022-12-31')))%>%summary()
Covid_monthlyae_activitydescrip <- Covid_monthlyae_activitydescrip %>%filter(between(date, as.Date('2007-07-01'), as.Date('2022-12-31')))
View(Covid_monthlyae_activitydescrip)
summary(Covid_monthlyae_activitydescrip)
#Summary for the the years till Dec 2022 (period between 2007-07-01 to 2022-12-31) split by ED and MIU/Other
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Emergency Department')%>%summary()
#NumberOfAttendancesAll: min=137, max=11579, mean=3575
#PercentageWtihin4HoursAll: min=40.2, max=100, mean=92.74
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Minor Injuries Unit or Other')%>%summary()
#NumberOfAttendancesAll: min=137, max=11579, mean=3575
#PercentageWtihin4HoursAll: min=40.2, max=100, mean=92.74
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Minor Injury Unit or Other')%>%summary()
#Checking if there are null values, result returned 138776
sum(is.na(Covid_monthlyae_activitydescrip))
#Checking if there are null values for NumberOfAttendancesAll, result returned zero
sum(is.na(Covid_monthlyae_activitydescrip$NumberOfAttendancesAll))
#Checking if there are null values for NumberWithin4HoursAll, result returned zero
sum(is.na(Covid_monthlyae_activitydescrip$NumberWithin4HoursAll))
#Checking if there are null values for PercentageWithin4HoursAll, result returned zero
sum(is.na(Covid_monthlyae_activitydescrip$PercentageWithin4HoursAll))
#Count number of ED and MIU/Other sites
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="Emergency Department") %>% count(TreatmentLocation)
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="Minor Injury Unit or Other") %>% count(TreatmentLocation)
#Entry with the lowest and highest NumberOfAttendancesAll
Covid_monthlyae_activitydescrip[which.min(Covid_monthlyae_activitydescrip$NumberOfAttendancesAll),]
Covid_monthlyae_activitydescrip[which.max(Covid_monthlyae_activitydescrip$NumberOfAttendancesAll),]
#Entry with the lowest and highest PercentageWithin4HoursAll
Covid_monthlyae_activitydescrip[which.min(Covid_monthlyae_activitydescrip$PercentageWithin4HoursAll),]
Covid_monthlyae_activitydescrip[which.max(Covid_monthlyae_activitydescrip$PercentageWithin4HoursAll),]
Covid_monthlyae_activitydescrip %>%
summarise(mean=mean(NumberOfAttendancesAll),
median = median(NumberOfAttendancesAll),
sd=sd(NumberOfAttendancesAll),
min=min(NumberOfAttendancesAll),
max=max(NumberOfAttendancesAll),
var=var(NumberOfAttendancesAll))
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Emergency Department')%>%
summarise(mean=mean(NumberOfAttendancesAll),
median = median(NumberOfAttendancesAll),
sd=sd(NumberOfAttendancesAll),
min=min(NumberOfAttendancesAll),
max=max(NumberOfAttendancesAll),
var=var(NumberOfAttendancesAll))
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Minor Injuries Unit or Other')%>%
summarise(mean=mean(NumberOfAttendancesAll),
median = median(NumberOfAttendancesAll),
sd=sd(NumberOfAttendancesAll),
min=min(NumberOfAttendancesAll),
max=max(NumberOfAttendancesAll),
var=var(NumberOfAttendancesAll))
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Minor Injury Unit or Other')%>%
summarise(mean=mean(NumberOfAttendancesAll),
median = median(NumberOfAttendancesAll),
sd=sd(NumberOfAttendancesAll),
min=min(NumberOfAttendancesAll),
max=max(NumberOfAttendancesAll),
var=var(NumberOfAttendancesAll))
unique(Covid_monthlyae_activitydescrip$HBT)
View(Covid_monthlyae_glmdemographicsCoviddate_all)
exp_coef_Covidglm_CoviddatesexageSIMDdaytypehourHBTime <- exp(coef(Covidglm_CoviddatesexageSIMDdaytypehourHBTime))
exp_coef_Covidglm_CoviddatesexageSIMDdaytypehourHBTime
#For the coefficients here, we can exponentiate them and this tells us the % increase in attendances for a 1% increase in this group
exp_coef_Covidglm_CoviddatesexageSIMDdaytypehourHBmonth <- exp(coef(Covidglm_CoviddatesexageSIMDdaytypehourHBmonth))
exp_coef_Covidglm_CoviddatesexageSIMDdaytypehourHBmonth
View(Covid_monthlyae_activity4hour2018)
View(Covidscottish_health_boards4hour2018calculated)
View(Covidscottish_health_boards4hour2018)
View(Covidscottish_health_boards4hour2018calculated)
View(Covidscottish_health_boards4hour2018calculated)
View(Covidscottish_health_boards4hour2020calculated)
View(Covidscottish_health_boards4hour2022calculated)
View(Covid_monthlyae_activity4hour2020)
View(Covid_monthlyae_activity4hour2018)
View(Covid_monthlyae_activity4hour2022)
Compare4hr_2018_2020_2022 <- Covid_monthlyae_activity4hour2018 %>%
left_join(Covid_monthlyae_activity4hour2020, by="HBName") %>%
left_join(Covid_monthlyae_activity4hour2022, by="HBName")
View(Compare4hr_2018_2020_2022)
#changing column names so it is clear which is for which year
colnames(Compare4hr_2018_2020_2022)<- c("HBName", "Percent4hr2018","Percent4hr2020","Percent4hr2022")
View(Compare4hr_2018_2020_2022)
str(Compare4hr_2018_2020_2022)
Compare4hr_2018_2020_2022$diff2020_2018 <- Compare4hr_2018_2020_2022$Percent4hr2020 - Compare4hr_2018_2020_2022$Percent4hr2018
View(Compare4hr_2018_2020_2022)
Compare4hr_2018_2020_2022$diff2022_2020 <- Compare4hr_2018_2020_2022$Percent4hr2022 - Compare4hr_2018_2020_2022$Percent4hr2020
View(Compare4hr_2018_2020_2022)
Compare4hr_2018_2020_2022$diff2022_2018 <- Compare4hr_2018_2020_2022$Percent4hr2022 - Compare4hr_2018_2020_2022$Percent4hr2018
View(Compare4hr_2018_2020_2022)
#Attendance rate 2020
#Only getting data for 2020, HBName and attendanceper1000pop column needed for choropleth
Covid_monthlyae_popest2020 <- Covid_monthlyae_popest %>%
filter(Year == "2020") %>%
select(HBName, attendanceper1000pop)
#POPULATION ESTIMATE
#Loading population estimate (only till 2022) csv file
Covid_HBpopulation_estimate <- read_csv(here("Rawdata", "20240809Popestimate_HB2019_1981to2022.csv"))
#Checking if there are null values, result returned zero
sum(is.na(Covid_HBpopulation_estimate))
#Filtering out total Scottish estimates (HB S92000003) for each year, leaving just individual HBs in the list
Covid_HBpopulation_estimate <- Covid_HBpopulation_estimate %>%
select(Year, HB, Sex, AllAges) %>%
filter(!HB=="S92000003", Sex=="All")
#Dataframe with the names of the health boards. Note some HB codes have been deprecated and replaced, hence more than 14 entries.
HB_names <- read_csv(here("Rawdata", "HealthBoard_2014_2019_names.csv"))
HB_names_only<-HB_names %>%
select(HB, HBName)
#want to merge population estimates with HB names
Covid_HBpopulation_estimate <- merge(Covid_HBpopulation_estimate, HB_names_only, by = "HB")
#Loading A&E monthly attendance and waiting times csv file
Covid_monthlyae_activity <- read_csv(here("Rawdata", "monthlyae_activity_202406.csv"))
#Checking if there are null values, result returned 138776
sum(is.na(Covid_monthlyae_activity))
#Checking if there are null values for NumberOfAttendancesAll, result returned zero
sum(is.na(Covid_monthlyae_activity$NumberOfAttendancesAll))
#Checking if there are null values for NumberWithin4HoursAll, result returned zero
sum(is.na(Covid_monthlyae_activity$NumberWithin4HoursAll))
#Checking if there are null values for PercentageWithin4HoursAll, result returned zero
sum(is.na(Covid_monthlyae_activity$PercentageWithin4HoursAll))
#creating a new column for Year using the first 4 digits of the Month column
Covid_monthlyae_activity$Year <- substr(Covid_monthlyae_activity$Month, 1,4)
Covid_monthlyae_activity$monthnumeric <- substr(Covid_monthlyae_activity$Month, 5,6)
#Attendance and percentage within 4 hours by HB each month
Covid_monthlyae_activity <- Covid_monthlyae_activity %>%
select(HBT, NumberOfAttendancesAll, PercentageWithin4HoursAll, Year, monthnumeric) %>%
group_by(Year, monthnumeric, HBT) %>%
summarise(NumberOfAttendancesAll=sum(NumberOfAttendancesAll),
PercentageWithin4HoursAll=mean(PercentageWithin4HoursAll))
#Changing the column name from HBT to HB to align the column names in the activity and population estimate dataframes
colnames(Covid_monthlyae_activity)<- c("Year","monthnumeric", "HB","NumberOfAttendancesAll","PercentageWithin4HoursAll")
#to merge A&E activity with population estimate
Covid_monthlyae_popest <- merge(Covid_monthlyae_activity, Covid_HBpopulation_estimate, by=c("HB","Year"))
#Calculating attendance per population for each month
Covid_monthlyae_popest$attendanceperpop<-Covid_monthlyae_popest$NumberOfAttendancesAll/Covid_monthlyae_popest$AllAges
#Calculating attendance per 1,000 population for each month
Covid_monthlyae_popest$attendanceper1000pop<-Covid_monthlyae_popest$attendanceperpop*1000
#mean attendance per population and attendance per 1,000 population for each year
Covid_monthlyae_popest <- Covid_monthlyae_popest %>%
select(HB, Year, NumberOfAttendancesAll, PercentageWithin4HoursAll, AllAges, attendanceperpop, attendanceper1000pop) %>%
group_by(Year, HB) %>%
summarise(NumberOfAttendancesAll=sum(NumberOfAttendancesAll),
PercentageWithin4HoursAll=mean(PercentageWithin4HoursAll),
AllAges=mean(AllAges),
attendanceperpop=mean(attendanceperpop),
attendanceper1000pop=mean(attendanceper1000pop))
#adding in the HB names
Covid_monthlyae_popest  <- merge(Covid_monthlyae_popest , HB_names_only, by = "HB")
#Attendance rate 2022
#Only getting data for 2022, HBName and attendanceper1000pop column needed for choropleth
Covid_monthlyae_popest2022 <- Covid_monthlyae_popest %>%
filter(Year == "2022") %>%
select(HBName, attendanceper1000pop)
Covid_monthlyae_popest2022$attendanceper1000pop<-round(Covid_monthlyae_popest2022$attendanceper1000pop,digits = 1)
#Creating the dataframe with attendanceper1000pop in 2022 by HB because it wouldn't draw the diagram unless I manually created the dataframe from the data obtained
Covid_monthlyae_popest2022 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
attendanceper1000pop = c(21.7, 21.2, 26.3, 19.0, 22.5, 16.9, 28.2, 24.3, 24.6, 25.1, 26.0, 27.2, 18.5, 23.3))
Covidscottish_health_boardsattendancerate2022 <- scottish_health_boards %>%
left_join(Covid_monthlyae_popest2022, by="HBName")
#Attendance rate 2020
#Only getting data for 2020, HBName and attendanceper1000pop column needed for choropleth
Covid_monthlyae_popest2020 <- Covid_monthlyae_popest %>%
filter(Year == "2020") %>%
select(HBName, attendanceper1000pop)
Covid_monthlyae_popest2020$attendanceper1000pop<-round(Covid_monthlyae_popest2020$attendanceper1000pop,digits = 1)
#Creating the dataframe with attendanceper1000pop in 2020 by HB because it wouldn't draw the diagram unless I manually created the dataframe from the data obtained
Covid_monthlyae_popest2020 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
attendanceper1000pop = c(20.5, 19.2, 21.5, 16.0, 18.7, 14.3, 21.9, 19.9, 21.9, 20.4, 19.8, 20.5, 15.2, 19.0))
Covidscottish_health_boardsattendancerate2020 <- scottish_health_boards %>%
left_join(Covid_monthlyae_popest2020, by="HBName")
#Attendance rate 2022
#Only getting data for 2022, HBName and attendanceper1000pop column needed for choropleth
Covid_monthlyae_popest2022 <- Covid_monthlyae_popest %>%
filter(Year == "2022") %>%
select(HBName, attendanceper1000pop)
Covid_monthlyae_popest2022$attendanceper1000pop<-round(Covid_monthlyae_popest2022$attendanceper1000pop,digits = 1)
#Creating the dataframe with attendanceper1000pop in 2022 by HB because it wouldn't draw the diagram unless I manually created the dataframe from the data obtained
Covid_monthlyae_popest2022 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
attendanceper1000pop = c(21.7, 21.2, 26.3, 19.0, 22.5, 16.9, 28.2, 24.3, 24.6, 25.1, 26.0, 27.2, 18.5, 23.3))
Covidscottish_health_boardsattendancerate2022 <- scottish_health_boards %>%
left_join(Covid_monthlyae_popest2022, by="HBName")
#Attendance rate 2018
#Only getting data for 2018, HBName and attendanceper1000pop column needed for choropleth
Covid_monthlyae_popest2018 <- Covid_monthlyae_popest %>%
filter(Year == "2018") %>%
select(HBName, attendanceper1000pop)
Covid_monthlyae_popest2018$attendanceper1000pop<-round(Covid_monthlyae_popest2018$attendanceper1000pop,digits = 1)
#Creating the dataframe with attendanceper1000pop in 2018 by HB because it wouldn't draw the diagram unless I manually created the dataframe from the data obtained
Covid_monthlyae_popest2018 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
attendanceper1000pop = c(25.8, 23.5, 26.4, 20.6, 22.8, 19.8, 31.0, 27.6, 26.3, 25.7, 24.6, 27.9, 21.6, 29.0))
Covidscottish_health_boardsattendancerate2018 <- scottish_health_boards %>%
left_join(Covid_monthlyae_popest2018, by="HBName")
View(Covidscottish_health_boardsattendancerate2018)
View(Covidscottish_health_boardsattendancerate2020)
View(Covid_monthlyae_popest2018)
View(Covid_monthlyae_popest2020)
View(Covid_monthlyae_popest2022)
#To compare the attendance rate per 1000 population for the different years 2018, 2020 and 2022
Compareattendanceper1000_2018_2020_2022 <- Covids_monthlyae_popest2018 %>%
left_join(Covids_monthlyae_popest2020, by="HBName") %>%
left_join(Covids_monthlyae_popest2022, by="HBName")
#To compare the attendance rate per 1000 population for the different years 2018, 2020 and 2022
Compareattendanceper1000_2018_2020_2022 <- Covid_monthlyae_popest2018 %>%
left_join(Covid_monthlyae_popest2020, by="HBName") %>%
left_join(Covid_monthlyae_popest2022, by="HBName")
View(Compareattendanceper1000_2018_2020_2022)
#changing column names so it is clear which is for which year
colnames(Compare4hr_2018_2020_2022)<- c("HBName", "Attendanceper1000_2018","Attendanceper1000_2020","Attendanceper1000_2022")
Compare4hr_2018_2020_2022 <- Covid_monthlyae_activity4hour2018 %>%
left_join(Covid_monthlyae_activity4hour2020, by="HBName") %>%
left_join(Covid_monthlyae_activity4hour2022, by="HBName")
#changing column names so it is clear which is for which year
colnames(Compare4hr_2018_2020_2022)<- c("HBName", "Percent4hr2018","Percent4hr2020","Percent4hr2022")
Compare4hr_2018_2020_2022$diff2020_2018 <- Compare4hr_2018_2020_2022$Percent4hr2020 - Compare4hr_2018_2020_2022$Percent4hr2018
Compare4hr_2018_2020_2022$diff2022_2020 <- Compare4hr_2018_2020_2022$Percent4hr2022 - Compare4hr_2018_2020_2022$Percent4hr2020
Compare4hr_2018_2020_2022$diff2022_2018 <- Compare4hr_2018_2020_2022$Percent4hr2022 - Compare4hr_2018_2020_2022$Percent4hr2018
View(Compare4hr_2018_2020_2022)
Compareattendanceper1000_2018_2020_2022 <- Covid_monthlyae_popest2018 %>%
left_join(Covid_monthlyae_popest2020, by="HBName") %>%
left_join(Covid_monthlyae_popest2022, by="HBName")
View(Compareattendanceper1000_2018_2020_2022)
#changing column names so it is clear which is for which year
colnames(Compareattendanceper1000_2018_2020_2022)<- c("HBName", "Attendanceper1000_2018","Attendanceper1000_2020","Attendanceper1000_2022")
View(Compareattendanceper1000_2018_2020_2022)
Compareattendanceper1000_2018_2020_2022$diff2020_2018 <- Compareattendanceper1000_2018_2020_2022$Attendanceper1000_2020 - Compareattendanceper1000_2018_2020_2022$Attendanceper1000_2018
Compareattendanceper1000_2018_2020_2022$diff2022_2020 <- Compareattendanceper1000_2018_2020_2022$Attendanceper1000_2022 - Compareattendanceper1000_2018_2020_2022$Attendanceper1000_2020
Compareattendanceper1000_2018_2020_2022$diff2022_2018 <- Compareattendanceper1000_2018_2020_2022$Attendanceper1000_2022 - Compareattendanceper1000_2018_2020_2022$Attendanceper1000_2018
View(Compareattendanceper1000_2018_2020_2022)
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
Covid_monthlyae_activitydescrip <- read_csv(here("Rawdata", "monthlyae_activity_202406.csv"))
#To create a date column
#creating a new column for Year, monthnumeric and day using data from the Month column
Covid_monthlyae_activitydescrip$Year <- substr(Covid_monthlyae_activitydescrip$Month, 1,4)
Covid_monthlyae_activitydescrip$monthnumeric <- substr(Covid_monthlyae_activitydescrip$Month, 5,6)
Covid_monthlyae_activitydescrip$day <- "01"
#converting from character to numeric variable
Covid_monthlyae_activitydescrip$Year <- as.numeric(Covid_monthlyae_activitydescrip$Year)
Covid_monthlyae_activitydescrip$monthnumeric <- as.numeric(Covid_monthlyae_activitydescrip$monthnumeric)
Covid_monthlyae_activitydescrip$day <- as.numeric(Covid_monthlyae_activitydescrip$day)
#making a date column using the Year, monthnumeric and day columns
Covid_monthlyae_activitydescrip<- Covid_monthlyae_activitydescrip %>%
mutate(date=make_date(Year, monthnumeric, day))
#Restrict data to years till Dec 2022 (period between 2007-07-01 to 2022-12-31)
Covid_monthlyae_activitydescrip <- Covid_monthlyae_activitydescrip %>%filter(between(date, as.Date('2007-07-01'), as.Date('2022-12-31')))
Covid_monthlyae_activitydescriptotal <- Covid_monthlyae_activitydescrip %>%
select(date, Year, HBT, NumberOfAttendancesAll, NumberWithin4HoursAll) %>%
group_by(date) %>%
summarise(NumberOfAttendancesAll=sum(NumberOfAttendancesAll),
NumberWithin4HoursAll=sum(NumberWithin4HoursAll))
#Histogram of total number of attendances July 2007-Dec 2022- distribution skewed to the right, not normal
HistogramCovid_monthlyae_activitydescriptotal <- Covid_monthlyae_activitydescriptotal %>%
ggplot(aes(x=NumberOfAttendancesAll))+
geom_histogram()
save_plot("Output/HistogramCovid_monthlyae_activitydescriptotal.svg", fig = HistogramCovid_monthlyae_activitydescriptotal, width = 14, height = 12)
#Refer to Data analysis for epidemiology - Week 2 Statistical inference in R (part 1) - 'Assumption checking and data transformation'
#Q_Q plot Jan 2018-Dec 2022
QQplotCovid_monthlyae_activitydescriptotal <- Covid_monthlyae_activitydescriptotal %>%
ggplot(aes(sample=NumberOfAttendancesAll)) +
stat_qq() +
stat_qq_line(color=2)
save_plot("Output/QQplotCovid_monthlyae_activitydescriptotal.svg", fig = QQplotCovid_monthlyae_activitydescriptotal, width = 14, height = 12)
#Kolmogorov-Smirnov test of normality July 2007-Dec 2022
Covid_monthlyae_activitydescriptotal %>%
pull(NumberOfAttendancesAll) %>%
ks.test(., "pnorm", mean=mean(.), sd=sd(.))
summary(Covid_monthlyae_activitydescrip)
#Summary for the the years till Dec 2022 (period between 2007-07-01 to 2022-12-31) split by ED and MIU/Other
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Emergency Department')%>%summary()
#NumberOfAttendancesAll: min=137, max=11579, mean=3575, median=3540
#PercentageWithin4HoursAll: min=40.2, max=100, mean=92.74, median=95.6
Covid_monthlyae_activitydescrip %>%filter(DepartmentType == 'Minor Injury Unit or Other')%>%summary()
#Count number of ED and MIU/Other sites
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="Emergency Department") %>% count(TreatmentLocation)
Covid_monthlyae_activitydescrip %>% filter(DepartmentType=="Minor Injury Unit or Other") %>% count(TreatmentLocation)
View(Covid_monthlyae_glmdemographicstotal)
View(Covid_monthlyae_glmdemographics)
#Count number of ED and MIU/Other sites
Covid_monthlyae_glmdemographics %>% filter(DepartmentType=="Emergency Department") %>% count(TreatmentLocation)
View(Covid_monthlyae_activitydescrip)
Covid_monthlyae_activitydescrip %>%
summarise(mean=mean(NumberOfAttendancesAll),
median = median(NumberOfAttendancesAll),
sd=sd(NumberOfAttendancesAll),
min=min(NumberOfAttendancesAll),
max=max(NumberOfAttendancesAll),
var=var(NumberOfAttendancesAll))
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
library(pscl)
summary(Covidglm_CoviddatesexageSIMDdaytypehourHBTime)
coefficients <- coef(Covidglm_CoviddatesexageSIMDdaytypehourHBTime)
exp_coefficients <- exp(coefficients)
exp_coefficients_df <- data.frame(Estimate = exp_coefficients)
print(exp_coefficients_df)
Covidglm_CoviddatesexageSIMDdaytypeHBTimenohour <- glm(NumberOfAttendances ~ Coviddate2 + Coviddate3 + Coviddate4 + Male + Female + Under18 + EighteentoTwentyfour + TwentyfivetoThirtynine + FortytoSixtyfour + SixtyfivetoSeventyfour + SIMD1 + SIMD2 + SIMD3 + SIMD4 + SIMD5 + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday + ED + NHSBorders + NHSFife + NHSShetland + NHSLanarkshire + NHSDumfriesandGalloway+ NHSForthValley + NHSGrampian + NHSWesternIsles + NHSOrkney + NHSTayside + NHSGreaterGlasgowandClyde + NHSHighland + NHSLothian + Time,
family = poisson(link = "log"),
data = Covid_monthlyae_glmprop)
summary(Covidglm_CoviddatesexageSIMDdaytypeHBTimenohour)
coefficients <- coef(Covidglm_CoviddatesexageSIMDdaytypeHBTimenohour)
exp_coefficients <- exp(coefficients)
exp_coefficients_df <- data.frame(Estimate = exp_coefficients)
print(exp_coefficients_df)
conf_intervals <- confint(Covidglm_CoviddatesexageSIMDdaytypeHBTimenohour)
exp_conf_intervals <- exp(conf_intervals)
exp_conf_intervals
