##THE LM FOR MONTH RETURNED WEIRD RESULTS SO LEFT THIS
modelsexageSIMDdaytypehourHBmonth_aic <- AIC(modelsexageSIMDdaytypehourHBmonth)
glm_sex_aic <- AIC(glm_sex)
glm_sexage_aic <- AIC(glm_sexage)
glm_sexageSIMD_aic <- AIC(glm_sexageSIMD)
glm_sexageSIMDday_aic <- AIC(glm_sexageSIMDday)
glm_sexageSIMDdaytype_aic <- AIC(glm_sexageSIMDdaytype)
glm_sexageSIMDdaytypehour_aic <- AIC(glm_sexageSIMDdaytypehour)
glm_sexageSIMDdaytypehourHB_aic <- AIC(glm_sexageSIMDdaytypehourHB)
glm_sexageSIMDdaytypehourHBmonth_aic <- AIC(glm_sexageSIMDdaytypehourHBmonth)
glm_sexageSIMDdaytypehourHBTime_aic <- AIC(glm_sexageSIMDdaytypehourHBTime)
# Create a named vector of AIC values
##HAVEN'T ADDED LM for MONTH IN HERE BECAUSE THE lm RETURNED WEIRD RESULTS, but did add GLM for month
aic_values_lmglm <- c(modelsex_aic, modelsexage_aic, modelsexageSIMD_aic, modelsexageSIMDday_aic, modelsexageSIMDdaytype_aic, modelsexageSIMDdaytypehour_aic, modelsexageSIMDdaytypehourHB_aic, glm_sex_aic, glm_sexage_aic, glm_sexageSIMD_aic, glm_sexageSIMDday_aic, glm_sexageSIMDdaytype_aic, glm_sexageSIMDdaytypehour_aic, glm_sexageSIMDdaytypehourHB_aic, glm_sexageSIMDdaytypehourHBmonth_aic)
names(aic_values_lmglm) <- c("LMsex", "LMsexage", "LMsexageSIMD", "LMsexageSIMDday", "LMsexageSIMDdaytype", "LMsexageSIMDdaytypehour", "LMsexageSIMDdaytypehourHB", "GLMsex", "GLMsexage", "GLMsexageSIMD", "GLMsexageSIMDday", "GLMsexageSIMDdaytype", "GLMsexageSIMDdaytypehour", "GLMsexageSIMDdaytypehourHB", "GLMsexageSIMDdaytypehourHBmonth")
# Print the AIC values for comparison
print(aic_values_lmglm)
# Find the model with the lowest AIC
min_aic_model_lmglm <- names(aic_values_lmglm)[which.min(aic_values_lmglm)]
# Print the model with the lowest AIC
cat("Model with the lowest AIC is:", min_aic_model_lmglm, "with an AIC of", min(aic_values_lmglm), "\n")
# Create a named vector of glm AIC values
aic_values_glm <- c(glm_sex_aic, glm_sexage_aic, glm_sexageSIMD_aic, glm_sexageSIMDday_aic, glm_sexageSIMDdaytype_aic, glm_sexageSIMDdaytypehour_aic, glm_sexageSIMDdaytypehourHB_aic, glm_sexageSIMDdaytypehourHBmonth_aic)
names(aic_values_glm) <- c("GLMsex", "GLMsexage", "GLMsexageSIMD", "GLMsexageSIMDday", "GLMsexageSIMDdaytype", "GLMsexageSIMDdaytypehour", "GLMsexageSIMDdaytypehourHB", "GLMsexageSIMDdaytypehourHBmonth")
# Print the AIC values for comparison
print(aic_values_glm)
# Find the model with the lowest AIC
min_aic_model_glm <- names(aic_values_glm)[which.min(aic_values_glm)]
# Print the model with the lowest AIC
cat("Model with the lowest AIC is:", min_aic_model_glm, "with an AIC of", min(aic_values_glm), "\n")
glm_sex_predictions <-predict(glm_sex, type = "response")
summary(glm_sex_predictions)
glm_sexage_predictions <-predict(glm_sexage, type = "response")
summary(glm_sexage_predictions)
glm_sexageSIMD_predictions <-predict(glm_sexageSIMD, type = "response")
summary(glm_sexageSIMD_predictions)
glm_sexageSIMDday_predictions <-predict(glm_sexageSIMDday, type = "response")
summary(glm_sexageSIMDday_predictions)
glm_sexageSIMDdaytype_predictions <-predict(glm_sexageSIMDdaytype, type = "response")
summary(glm_sexageSIMDdaytype_predictions)
glm_sexageSIMDdaytypehour_predictions <-predict(glm_sexageSIMDdaytypehour, type = "response")
summary(glm_sexageSIMDdaytypehour_predictions)
glm_sexageSIMDdaytypehourHB_predictions <-predict(glm_sexageSIMDdaytypehourHB, type = "response")
summary(glm_sexageSIMDdaytypehourHB_predictions)
glm_sexageSIMDdaytypehourHBmonth_predictions <- predict(glm_sexageSIMDdaytypehourHBmonth, type = "response")
summary(glm_sexageSIMDdaytypehourHBmonth_predictions)
glm_sexageSIMDdaytypehourHBTime_predictions <- predict(glm_sexageSIMDdaytypehourHBTime, type = "response")
summary(glm_sexageSIMDdaytypehourHBTime_predictions)
View(HBUpdatespopulation_estimate_HBname)
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter(HB=!S92000003)
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter(HB==!S92000003)
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter(HB==!S92000003)
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter("HB"==!"S92000003")
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter("HB"==!"S92000003")
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter("HB"==!"S92000003")
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter(!HB%in%"S92000003")
View(ScotUpdatespopulation2018to2023glmplot)
ScotUpdatespopulation2018to2023glmplot <- HBUpdatespopulation_estimate_HBname %>%
filter(!HB%in%"S92000003") %>%
group_by(Year) %>%
summarise(AllAges=sum(AllAges)) %>%
filter(Year=="2018"|Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022"|Year=="2023") %>%
select(Year, AllAges)
View(ScotUpdatespopulation2018to2023glmplot)
#Selecting only the columns needed for glm plot and adding a column for year to join with the population data
sexagesimddayhourdepttypeHB_proportionsglmplot <- sexagesimddayhourdepttypeHB_proportions %>%
select(Month, Total_attendances)
sexagesimddayhourdepttypeHB_proportionsglmplot$Year <- format(as.Date(sexagesimddayhourdepttypeHB_proportions$Month, format="%Y/%m/%d"),"%Y")
#Same as above but including month
#Selecting only the columns needed for glm plot and adding a column for year to join with the population data
sexagesimddayhourdepttypeHBmonth_proportionsglmplot <- sexagesimddayhourdepttypeHBmonth_proportions %>%
select(Month, Total_attendances)
sexagesimddayhourdepttypeHBmonth_proportionsglmplot$Year <- format(as.Date(sexagesimddayhourdepttypeHBmonth_proportions$Month, format="%Y/%m/%d"),"%Y")
#Same as above but including Time
#Selecting only the columns needed for glm plot and adding a column for year to join with the population data
sexagesimddayhourdepttypeHBTime_proportionsglmplot <- sexagesimddayhourdepttypeHBTime_proportions %>%
select(Month, Total_attendances)
sexagesimddayhourdepttypeHBTime_proportionsglmplot$Year <- format(as.Date(sexagesimddayhourdepttypeHBTime_proportions$Month, format="%Y/%m/%d"),"%Y")
#combining population data with attendance data to create the glm plot
sexagesimddayhourdepttypeHB_proportionsglmplot <-
merge(ScotUpdatespopulation2018to2023glmplot, sexagesimddayhourdepttypeHB_proportionsglmplot, by=c("Year"))
#same as above but including month
#combining population data with attendance data to create the glm plot
sexagesimddayhourdepttypeHBmonth_proportionsglmplot <-
merge(ScotUpdatespopulation2018to2023glmplot, sexagesimddayhourdepttypeHBmonth_proportionsglmplot, by=c("Year"))
#same as above but including Time
#combining population data with attendance data to create the glm plot
sexagesimddayhourdepttypeHBTime_proportionsglmplot <-
merge(ScotUpdatespopulation2018to2023glmplot, sexagesimddayhourdepttypeHBTime_proportionsglmplot, by=c("Year"))
#combining the glm predictions for glm_sex_prediction data with actual
sexagesimddayhourdepttypeHB_proportionsglmplot <- sexagesimddayhourdepttypeHB_proportionsglmplot %>%
mutate("glmsexprediction" = glm_sex_predictions/AllAges, "rates" = Total_attendances/AllAges)
#same as above but including month
#combining the glm predictions for glm_sex_prediction data with actual
sexagesimddayhourdepttypeHBmonth_proportionsglmplot <- sexagesimddayhourdepttypeHBmonth_proportionsglmplot %>%
mutate("glmsexprediction" = glm_sex_predictions/AllAges, "rates" = Total_attendances/AllAges)
#same as above but including Time instead of month
#combining the glm predictions for glm_sex_prediction data with actual
sexagesimddayhourdepttypeHBTime_proportionsglmplot <- sexagesimddayhourdepttypeHBTime_proportionsglmplot %>%
mutate("glmsexprediction" = glm_sex_predictions/AllAges, "rates" = Total_attendances/AllAges)
#Plotting graph for glm sex prediction versus actual
sexagesimddayhourdepttypeHB_proportionsglmplot %>%
ggplot(aes(x=Month))+
labs(x="Time", y= "Rate of attendance", title = "Rate of Scottish A&E attendances")+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexprediction), color = "red")
#combining the glm predictions for the other glm models with sexagesimddayhourdepttypeHB_proportionsglmplot
sexagesimddayhourdepttypeHB_proportionsglmplot <- sexagesimddayhourdepttypeHB_proportionsglmplot %>%
mutate("glmsexageprediction" = glm_sexage_predictions/AllAges,
"glmsexageSIMDprediction" = glm_sexageSIMD_predictions/AllAges,
"glmsexageSIMDdayprediction" = glm_sexageSIMDday_predictions/AllAges,
"glmsexageSIMDdaytypeprediction" = glm_sexageSIMDdaytype_predictions/AllAges,
"glmsexageSIMDdaytypehourprediction" = glm_sexageSIMDdaytypehour_predictions/AllAges,
"glmsexageSIMDdaytypehourHBprediction" = glm_sexageSIMDdaytypehourHB_predictions/AllAges)
#same as above but including month
#combining the glm predictions for the other glm models with sexagesimddayhourdepttypeHBmonth_proportionsglmplot
sexagesimddayhourdepttypeHBmonth_proportionsglmplot <- sexagesimddayhourdepttypeHBmonth_proportionsglmplot %>%
mutate("glmsexageprediction" = glm_sexage_predictions/AllAges,
"glmsexageSIMDprediction" = glm_sexageSIMD_predictions/AllAges,
"glmsexageSIMDdayprediction" = glm_sexageSIMDday_predictions/AllAges,
"glmsexageSIMDdaytypeprediction" = glm_sexageSIMDdaytype_predictions/AllAges,
"glmsexageSIMDdaytypehourprediction" = glm_sexageSIMDdaytypehour_predictions/AllAges,
"glmsexageSIMDdaytypehourHBprediction" = glm_sexageSIMDdaytypehourHB_predictions/AllAges,
"glmsexageSIMDdaytypehourHBmonthprediction" = glm_sexageSIMDdaytypehourHBmonth_predictions/AllAges)
#same as above but including Time instead of month
#combining the glm predictions for the other glm models with sexagesimddayhourdepttypeHBTime_proportionsglmplot
sexagesimddayhourdepttypeHBTime_proportionsglmplot <- sexagesimddayhourdepttypeHBTime_proportionsglmplot %>%
mutate("glmsexageprediction" = glm_sexage_predictions/AllAges,
"glmsexageSIMDprediction" = glm_sexageSIMD_predictions/AllAges,
"glmsexageSIMDdayprediction" = glm_sexageSIMDday_predictions/AllAges,
"glmsexageSIMDdaytypeprediction" = glm_sexageSIMDdaytype_predictions/AllAges,
"glmsexageSIMDdaytypehourprediction" = glm_sexageSIMDdaytypehour_predictions/AllAges,
"glmsexageSIMDdaytypehourHBprediction" = glm_sexageSIMDdaytypehourHB_predictions/AllAges,
"glmsexageSIMDdaytypehourHBTimeprediction" = glm_sexageSIMDdaytypehourHBTime_predictions/AllAges)
glmsexageSIMDdaytypehourHBpredictionallinone <- ggplot(data= sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance", title = "glmsexageSIMDdaytypehourHBpredictionallinone")+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexprediction), color = "red")+
geom_line(aes(y=glmsexageprediction), color = "blue")+
geom_line(aes(y=glmsexageSIMDprediction), color = "green")+
geom_line(aes(y=glmsexageSIMDdayprediction), color = "yellow")+
geom_line(aes(y=glmsexageSIMDdaytypeprediction), color = "orange")+
geom_line(aes(y=glmsexageSIMDdaytypehourprediction), color = "purple")+
geom_line(aes(y=glmsexageSIMDdaytypehourHBprediction), color = "brown")
save_plot("Output/glmsexageSIMDdaytypehourHBpredictionallinone.svg", fig = glmsexageSIMDdaytypehourHBpredictionallinone, width = 6, height = 6)
#same as above including month
glmsexageSIMDdaytypehourHBmonthpredictionallinone <- ggplot(data= sexagesimddayhourdepttypeHBmonth_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance", title = "glmsexageSIMDdaytypehourHBmonthpredictionallinone")+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexprediction), color = "red")+
geom_line(aes(y=glmsexageprediction), color = "blue")+
geom_line(aes(y=glmsexageSIMDprediction), color = "green")+
geom_line(aes(y=glmsexageSIMDdayprediction), color = "yellow")+
geom_line(aes(y=glmsexageSIMDdaytypeprediction), color = "orange")+
geom_line(aes(y=glmsexageSIMDdaytypehourprediction), color = "purple")+
geom_line(aes(y=glmsexageSIMDdaytypehourHBprediction), color = "brown")+
geom_line(aes(y=glmsexageSIMDdaytypehourHBmonthprediction), color = "salmon")
save_plot("Output/glmsexageSIMDdaytypehourHBmonthpredictionallinone.svg", fig = glmsexageSIMDdaytypehourHBmonthpredictionallinone, width = 6, height = 6)
glmsexprediction <- ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexprediction), color = "red")
save_plot("Output/glmsexprediction.svg", fig = glmsexprediction, width = 5, height = 5)
ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexprediction), color = "red")
glmsexageprediction <- ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageprediction), color = "blue")
save_plot("Output/glmsexageprediction.svg", fig = glmsexageprediction, width = 5, height = 5)
glmsexageSIMDprediction <- ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDprediction), color = "green")
save_plot("Output/glmsexageSIMDprediction.svg", fig = glmsexageSIMDprediction, width = 5, height = 5)
glmsexageSIMDdayprediction <- ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDdayprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDdayprediction), color = "yellow")
save_plot("Output/glmsexageSIMDdayprediction.svg", fig = glmsexageSIMDdayprediction, width = 5, height = 5)
glmsexageSIMDdaytypeprediction <- ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDdaytypeprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDdaytypeprediction), color = "orange")
save_plot("Output/glmsexageSIMDdaytypeprediction.svg", fig = glmsexageSIMDdaytypeprediction, width = 5, height = 5)
glmsexageSIMDdaytypehourprediction <- ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDdaytypehourprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDdaytypehourprediction), color = "purple")
save_plot("Output/glmsexageSIMDdaytypehourprediction.svg", fig = glmsexageSIMDdaytypehourprediction, width = 5, height = 5)
glmsexageSIMDdaytypehourHBprediction <- ggplot(data=sexagesimddayhourdepttypeHB_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDdaytypehourHBprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDdaytypehourHBprediction), color = "brown")
save_plot("Output/glmsexageSIMDdaytypehourHBprediction.svg", fig = glmsexageSIMDdaytypehourHBprediction, width = 5, height = 5)
ggplot(data=sexagesimddayhourdepttypeHBmonth_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDdaytypehourHBmonthprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDdaytypehourHBmonthprediction), color = "salmon")
##FOR SOME REASON THE BLACK LINE ON THIS DOESN'T SHOW CLEARLY, THOUGH IT SHOWS IF RAN ALONE
glmsexageSIMDdaytypehourHBmonthprediction <- ggplot(data=sexagesimddayhourdepttypeHBmonth_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDdaytypehourHBmonthprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDdaytypehourHBmonthprediction), color = "salmon")
save_plot("Output/glmsexageSIMDdaytypehourHBmonthprediction.svg", fig = glmsexageSIMDdaytypehourHBmonthprediction, width = 5, height = 5)
glmsexageSIMDdaytypehourHBTimeprediction <- ggplot(data=sexagesimddayhourdepttypeHBTime_proportionsglmplot, aes(x=Month))+
labs(x="Time", y= "Rate of attendance",
#title = "glmsexageSIMDdaytypehourHBTimeprediction"
)+
geom_line(aes(y= rates), color = "black")+
geom_line(aes(y=glmsexageSIMDdaytypehourHBTimeprediction), color = "pink")
save_plot("Output/glmsexageSIMDdaytypehourHBTimeprediction.svg", fig = glmsexageSIMDdaytypehourHBTimeprediction, width = 5, height = 5)
#Chris said doing this doesn't make sense because it is me assuming that the whole population only consist of males (for example)
#Male= 1, TwentyfivetoThirtynine = 1, SIMDTwo = 1, Saturday = 1, Ninetotenam = 1, ED = 1, NHSOrkney = 1
dataforecast1<- data.frame(Male =1, Female =0, Under18 =0, EighteentoTwentyfour =0, TwentyfivetoThirtynine =1, FortytoSixtyfour =0,  SixtyfivetoSeventyfour =0, SIMDTwo =1, SIMDThree =0, SIMDFour =0, SIMDFive =0, Tuesday =0, Wednesday =0, Thursday =0, Friday =0, Saturday =1, Sunday =0, ED =1, Midnighttoone =0, Twotothreeam =0, Threetofouram =0, Fourtofiveam =0, Fivetosixam =0, Sixtosevenam =0, Seventoeightam =0, Eighttonineam =0, Ninetotenam =1, Tentoelevenam =0, Eleventonoon =0, Noontoonepm =0, Onetotwopm =0, Twotothreepm =0, Threetofourpm =0, Fourtofivepm =0, Fivetosixpm =0, Sixtosevenpm =0, Seventoeightpm =0, Eighttoninepm =0, Ninetotenpm =0, Tentoelevenpm =0, Eleventomidnight =0, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0)
predict(glm_sexageSIMDdaytypehourHB, dataforecast1, type="response")
#Chris said doing this doesn't make sense because it is me assuming that the whole population only consist of males (for example)
#Male= 1, TwentyfivetoThirtynine = 1, SIMDTwo = 1, Saturday = 1, Ninetotenam = 1, ED = 1, NHSOrkney = 1
dataforecast1<- data.frame(Male =1, Female =0, Under18 =0, EighteentoTwentyfour =0, TwentyfivetoThirtynine =1, FortytoSixtyfour =0,  SixtyfivetoSeventyfour =0, SIMDOne=0, SIMDTwo =1, SIMDThree =0, SIMDFour =0, SIMDFive =0, Tuesday =0, Wednesday =0, Thursday =0, Friday =0, Saturday =1, Sunday =0, ED =1, Midnighttoone =0, Twotothreeam =0, Threetofouram =0, Fourtofiveam =0, Fivetosixam =0, Sixtosevenam =0, Seventoeightam =0, Eighttonineam =0, Ninetotenam =1, Tentoelevenam =0, Eleventonoon =0, Noontoonepm =0, Onetotwopm =0, Twotothreepm =0, Threetofourpm =0, Fourtofivepm =0, Fivetosixpm =0, Sixtosevenpm =0, Seventoeightpm =0, Eighttoninepm =0, Ninetotenpm =0, Tentoelevenpm =0, Eleventomidnight =0, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0)
predict(glm_sexageSIMDdaytypehourHB, dataforecast1, type="response")
#Chris said doing this doesn't make sense because it is me assuming that the whole population only consist of males (for example)
#Male= 1, TwentyfivetoThirtynine = 1, SIMDTwo = 1, Saturday = 1, Ninetotenam = 1, ED = 1, NHSOrkney = 1
dataforecast1<- data.frame(Male =1, Female =0, Under18 =0, EighteentoTwentyfour =0, TwentyfivetoThirtynine =1, FortytoSixtyfour =0,  SixtyfivetoSeventyfour =0, SIMDTwo =1, SIMDThree =0, SIMDFour =0, SIMDFive =0, Tuesday =0, Wednesday =0, Thursday =0, Friday =0, Saturday =1, Sunday =0, ED =1, Midnighttoone =0, Twotothreeam =0, Threetofouram =0, Fourtofiveam =0, Fivetosixam =0, Sixtosevenam =0, Seventoeightam =0, Eighttonineam =0, Ninetotenam =1, Tentoelevenam =0, Eleventonoon =0, Noontoonepm =0, Onetotwopm =0, Twotothreepm =0, Threetofourpm =0, Fourtofivepm =0, Fivetosixpm =0, Sixtosevenpm =0, Seventoeightpm =0, Eighttoninepm =0, Ninetotenpm =0, Tentoelevenpm =0, Eleventomidnight =0, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0)
predict(glm_sexageSIMDdaytypehourHB, dataforecast1, type="response")
dataforecast1<- data.frame(Male =1, Female =0, Under18 =0, EighteentoTwentyfour =0, TwentyfivetoThirtynine =1, FortytoSixtyfour =0,  SixtyfivetoSeventyfour =0, SIMDTwo =1, SIMDThree =0, SIMDFour =0, SIMDFive =0, Tuesday =0, Wednesday =0, Thursday =0, Friday =0, Saturday =1, Sunday =0, ED =1, Midnighttoone =0, Twotothreeam =0, Threetofouram =0, Fourtofiveam =0, Fivetosixam =0, Sixtosevenam =0, Seventoeightam =0, Eighttonineam =0, Ninetotenam =1, Tentoelevenam =0, Eleventonoon =0, Noontoonepm =0, Onetotwopm =0, Twotothreepm =0, Threetofourpm =0, Fourtofivepm =0, Fivetosixpm =0, Sixtosevenpm =0, Seventoeightpm =0, Eighttoninepm =0, Ninetotenpm =0, Tentoelevenpm =0, Eleventomidnight =0, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0)
predict(glm_sexageSIMDdaytypehourHB, dataforecast1, type="response")
#using month august
dataforecast2<- data.frame(Male =0.4892402, Female =0.4831486, Under18 =0.1824, EighteentoTwentyfour =0.08412196, TwentyfivetoThirtynine =0.1833776, FortytoSixtyfour =0.2799453,  SixtyfivetoSeventyfour =0.10060757, SIMDOne =0.2573839,SIMDTwo =0.2128418, SIMDThree =0.1744787, SIMDFour =0.1546053, SIMDFive =0.1318929, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =0.8473706, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0.01947048, NHSFife =0.05778455, NHSShetland =0.005656719, NHSLanarkshire =0.1265399, NHSDumfriesandGalloway =0.03022991, NHSForthValley =0.0536222, NHSGrampian =0.07932528, NHSWesternIsles =0.005678588, NHSOrkney =0.004278987, NHSTayside =0.05844061, NHSGreaterGlasgowandClyde =0.2583648, NHSHighland =0.06884285, NHSLothian =0.1691621, Jan= 0, Feb= 0, March = 0, April =0, May =0 , June =0, July=0, August=1, Sept=0, Oct = 0, Nov=0, Dec=0)
predict(glm_sexageSIMDdaytypehourHBmonth, dataforecast2, type="response")
#using month and July 2023 proportions for all for month and time (should have only used month tbh), set ED as 1 because Orkney only has ED
OrkneyAug23<- data.frame(Male =0.5, Female =0.5, Under18 =0.1824, EighteentoTwentyfour =0.08412196, TwentyfivetoThirtynine =0.1833776, FortytoSixtyfour =0.2799453,  SixtyfivetoSeventyfour =0.10060757, SIMDOne =0.2573839,SIMDTwo =0.2128418, SIMDThree =0.1744787, SIMDFour =0.1546053, SIMDFive =0.1318929, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =1, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0, Jan= 0, Feb= 0, March = 0, April =0, May =0 , June =0, July=0, August=1, Sept=0, Oct = 0, Nov=0, Dec=0)
predict(glm_sexageSIMDdaytypehourHBmonth, OrkneyAug23, type="response")
#using month and real orkney proportions for age, sex, simd from July 2023, set ED as 1 because Orkney only has ED
OrkneyAug23<- data.frame(Male =0.464179104, Female =0.426865672, Under18 =0.131343284, EighteentoTwentyfour =0.092537313, TwentyfivetoThirtynine =0.153731343, FortytoSixtyfour =0.26119403,  SixtyfivetoSeventyfour =0.126865672, SIMDOne =0.013432836,SIMDTwo =0.155223881, SIMDThree =0.235820896, SIMDFour =0.405970149, SIMDFive =0.068656716, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =1, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0, Jan= 0, Feb= 0, March = 0, April =0, May =0 , June =0, July=0, August=1, Sept=0, Oct = 0, Nov=0, Dec=0)
predict(glm_sexageSIMDdaytypehourHBmonth, OrkneyAug23, type="response")
#using real orkney proportions for age, sex, simd from July 2023, set ED as 1 because Orkney only has ED
OrkneyAug23Time<- data.frame(Male =0.464179104, Female =0.426865672, Under18 =0.131343284, EighteentoTwentyfour =0.092537313, TwentyfivetoThirtynine =0.153731343, FortytoSixtyfour =0.26119403,  SixtyfivetoSeventyfour =0.126865672, SIMDOne =0.013432836,SIMDTwo =0.155223881, SIMDThree =0.235820896, SIMDFour =0.405970149, SIMDFive =0.068656716, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =1, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0, Time=2039)
predict(glm_sexageSIMDdaytypehourHBTime, OrkneyAug23Time, type="response")
#using real orkney proportions for age, sex, simd from July 2023, set ED as 1 because Orkney only has ED
OrkneySept23Time<- data.frame(Male =0.464179104, Female =0.426865672, Under18 =0.131343284, EighteentoTwentyfour =0.092537313, TwentyfivetoThirtynine =0.153731343, FortytoSixtyfour =0.26119403,  SixtyfivetoSeventyfour =0.126865672, SIMDOne =0.013432836,SIMDTwo =0.155223881, SIMDThree =0.235820896, SIMDFour =0.405970149, SIMDFive =0.068656716, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =1, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0, Time=2070)
predict(glm_sexageSIMDdaytypehourHBTime, OrkneySept23Time, type="response")
#using real orkney proportions for age, sex, simd from July 2023, set ED as 1 because Orkney only has ED
OrkneyOct23Time<- data.frame(Male =0.464179104, Female =0.426865672, Under18 =0.131343284, EighteentoTwentyfour =0.092537313, TwentyfivetoThirtynine =0.153731343, FortytoSixtyfour =0.26119403,  SixtyfivetoSeventyfour =0.126865672, SIMDOne =0.013432836,SIMDTwo =0.155223881, SIMDThree =0.235820896, SIMDFour =0.405970149, SIMDFive =0.068656716, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =1, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =1, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0, Time=2100)
predict(glm_sexageSIMDdaytypehourHBTime, OrkneyOct23Time, type="response")
#Orkney attendance rates 2018-2023
Orkney_rates2018to2023 <- ae_byboard2018to2023 %>% filter(NHSBoardName=="NHS Orkney") %>% mutate(Month = ae_byboard2018to2023_proportionsnewdate$Month)
Orkney_Updatespopulation2018to2023 <- HBUpdatespopulation_estimate_HBname %>% filter(HBName=="NHS Orkney")
Orkney_Updatespopulation2018to2023 <- Orkney_Updatespopulation2018to2023 %>% filter(Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022"|Year=="2023")
#combining the dataframe for attendance and Orkney population in 2018-2023
Orkney_rates2018to2023 <- merge(Orkney_rates2018to2023, Orkney_Updatespopulation2018to2023, by=c("Year"))
#adding a new column containing the attendance rate
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% mutate(attendancerate = Attendances/AllAges)
#removing unnecessary columns
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% select(-MonthEndingDate, -HBName, -HB, -Sex, -Year)
#creating a dataframe for the attendance rate predicted for Aug 2023 and Sept 2023
OrkneyAug23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 178, Month = "2023-08-01", AllAges= 22731, attendancerate=0.0078371)
OrkneySept23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 177, Month = "2023-09-01", AllAges= 22731, attendancerate=0.0078106)
OrkneyOct23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 176, Month = "2023-10-01", AllAges= 22731, attendancerate=0.0077851)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyAug23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneySept23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyOct23Time_attendancerate)
str(Orkney_rates2018to2023)
#changing attendancerate to a numeric
Orkney_rates2018to2023$attendancerate <- as.numeric(Orkney_rates2018to2023$attendancerate)
#graph of actual Orkney attendance rates followed by predicted
Orkney_predict_rates2018to2023 <- ggplot(data=Orkney_rates2018to2023, aes(x=Month, y=attendancerate))+
geom_point()+
geom_line()+
labs(x="Year",
y="Attendance rate")
save_plot("Output/Orkney_predict_rates2018to2023.svg", fig=Orkney_predict_rates2018to2023, width=14, height=12)
#trying with orkney as 1/14 - spoke with Chris no need to do 1/14
OrkneyAug23Time<- data.frame(Male =0.464179104, Female =0.426865672, Under18 =0.131343284, EighteentoTwentyfour =0.092537313, TwentyfivetoThirtynine =0.153731343, FortytoSixtyfour =0.26119403,  SixtyfivetoSeventyfour =0.126865672, SIMDOne =0.013432836,SIMDTwo =0.155223881, SIMDThree =0.235820896, SIMDFour =0.405970149, SIMDFive =0.068656716, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =1, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =0.0714285714285714, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0, Time=2039)
predict(glm_sexageSIMDdaytypehourHBTime, OrkneyAug23Time, type="response")
#trying with Orkney as 1/14 and month as 1/12 - Spoke with Chris no need to do this
OrkneyAug23<- data.frame(Male =0.464179104, Female =0.426865672, Under18 =0.131343284, EighteentoTwentyfour =0.092537313, TwentyfivetoThirtynine =0.153731343, FortytoSixtyfour =0.26119403,  SixtyfivetoSeventyfour =0.126865672, SIMDOne =0.013432836,SIMDTwo =0.155223881, SIMDThree =0.235820896, SIMDFour =0.405970149, SIMDFive =0.068656716, Tuesday =0.1456571, Wednesday =0.1449873, Thursday =0.1390299, Friday =0.1377609, Saturday =0.1347645, Sunday =0.1395234, ED =1, Midnighttoone =0.02342818, Twotothreeam =0.01517344, Threetofouram =0.01303421, Fourtofiveam =0.012867208, Fivetosixam =0.012525249, Sixtosevenam =0.0134716, Seventoeightam =0.01639814, Eighttonineam =0.03026736, Ninetotenam =0.05104735, Tentoelevenam =0.06138565, Eleventonoon =0.06703195, Noontoonepm =0.06518696, Onetotwopm =0.0656164, Twotothreepm =0.06416109, Threetofourpm =0.06517901, Fourtofivepm =0.06414518, Fivetosixpm =0.06195028, Sixtosevenpm =0.06039954, Seventoeightpm =0.05431584, Eighttoninepm =0.05063382, Ninetotenpm =0.04506704, Tentoelevenpm =0.03786999, Eleventomidnight =0.02978226, NHSBorders =0, NHSFife =0, NHSShetland =0, NHSLanarkshire =0, NHSDumfriesandGalloway =0, NHSForthValley =0, NHSGrampian =0, NHSWesternIsles =0, NHSOrkney =0.0714285714285714, NHSTayside =0, NHSGreaterGlasgowandClyde =0, NHSHighland =0, NHSLothian =0, Jan= 0, Feb= 0, March = 0, April =0, May =0 , June =0, July=0, August=0.083333333
, Sept=0, Oct = 0, Nov=0, Dec=0)
predict(glm_sexageSIMDdaytypehourHBmonth, OrkneyAug23, type="response")
# Path to the downloaded shapefile
shapefile_path <- "/Users/hui_p/Documents/AandE_test/AandE_test/Rawdata/SG_NHS_HealthBoards_2019/SG_NHS_HealthBoards_2019.shp"
# Read the shapefile
scottish_health_boards <- st_read(shapefile_path)
labels_data <- scottish_health_boards %>%
mutate(geometry = st_centroid(geometry))
HBUpdatespopulation_estimate_HBname2022 <- HBUpdatespopulation_estimate_HBname %>%
filter(Year == "2022")
# Assuming your health boards' shapefile has an ID or name column called 'HBName'
HBUpdatespopulation_estimate_HBname2022_data <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Forth Valley", "Grampian", "Highland", "Lothian", "Orkney", "Shetland", "Western Isles", "Fife", "Tayside", "Greater Glasgow and Clyde", "Lanarkshire"),
Population2022 = c(368837, 116520, 148892, 306927, 588868, 325310, 925939, 22731, 22968, 26606, 376267, 419000, 1192485, 666129)
)
# Ensure the merge key exists in both datasets
scottish_health_boards_pop2022 <- scottish_health_boards %>%
left_join(HBUpdatespopulation_estimate_HBname2022_data, by = "HBName")  # 'by' specifies the column to join by
ScottishMapHBPopulation2022 <- ggplot(data = scottish_health_boards_pop2022) +
geom_sf(aes(fill = Population2022)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis", direction = -1, guide_legend(title = "Population \nestimate")) +
labs(
#title = "Population estimate in 2022 by Scottish Health Board",
fill = "AllAges") +
#theme_minimal()
theme_void()
save_plot("Output/ScottishMapHBPopulation2022.svg", fig = ScottishMapHBPopulation2022, width = 12, height = 14)
#didn't work when I left_join with scottish_health_boards, had to manually input the data
HBwaiting4Hr2022 <- ae_4HwaitingbyHB_2022 %>% select(NHSBoardName, percent4Hr)
colnames(HBwaiting4Hr2022)<- c("HBName","percent4Hr")
#had to manually input the data for it to wokr
aeHBwaiting4Hr2022 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
percent4Hr = c(69.5, 64.5, 79.7, 73.0, 64.7, 70.9, 71.1, 85.4, 58.2, 63.4, 91.4, 94.0, 90.4, 97.8))
scottish_health_boards4Hwaiting2022 <- scottish_health_boards %>%
left_join(aeHBwaiting4Hr2022, by="HBName")
#Chloropeth of Scottish 4 hour waiting in 2022
png(file = "Output/ScottishMapHB4Hwaiting2022.png")
ggplot(data = scottish_health_boards4Hwaiting2022) +
geom_sf(aes(fill = percent4Hr)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(55, 100),
guide_legend(title = "% Patients seen \nwithin 4 hours")) +
labs(title = "% Patients seen within 4 hours in 2022 by Scottish Health Board", fill = "percent4Hr") +
#theme_minimal()
theme_void()
dev.off()
ScottishMapHB4Hwaiting2022 <- ggplot(data = scottish_health_boards4Hwaiting2022) +
geom_sf(aes(fill = percent4Hr)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(55, 100),
guide_legend(title = "% Patients seen \nwithin 4 hours")) +
labs(
#title = "% Patients seen within 4 hours in 2022 \nby Scottish Health Board",
fill = "percent4Hr") +
#theme_minimal()
theme_void()
save_plot("Output/ScottishMapHB4Hwaiting2022.svg", fig = ScottishMapHB4Hwaiting2022, width = 12, height = 14)
ae_4HwaitingbyHB_2012 <-ae_4HwaitingbyHB %>%
filter(Year=="2012")
ae_4HwaitingbyHB_2012<- ae_4HwaitingbyHB_2012 %>%
select(NHSBoardName, NumberOfAttendancesAll, NumberWithin4HoursAll) %>%
group_by(NHSBoardName)%>%
summarise(NumberOfAttendancesAll=sum(NumberOfAttendancesAll),
NumberWithin4HoursAll=sum(NumberWithin4HoursAll))
#counting the percentages for within 4 hours
ae_4HwaitingbyHB_2012$percent4Hr<-ae_4HwaitingbyHB_2012$NumberWithin4HoursAll/ae_4HwaitingbyHB_2012$NumberOfAttendancesAll
ae_4HwaitingbyHB_2012$percent4Hr<-ae_4HwaitingbyHB_2012$percent4Hr*100
#rounding up percent4Hr to 1 decimal point
ae_4HwaitingbyHB_2012$percent4Hr<-round(ae_4HwaitingbyHB_2012$percent4Hr,digits = 1)
#Creating the dataframe with percent within 4 hours by HB
aeHBwaiting4Hr2012 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
percent4Hr = c(93.4, 96.7, 94.2, 94.6, 92.8, 96.5, 94.4, 97.9, 93.0, 91.5, 98.6, 99.4, 98.9, 98.1))
scottish_health_boards4Hwaiting2012 <- scottish_health_boards %>%
left_join(aeHBwaiting4Hr2012, by="HBName")
#Chloropeth of Scottish 4 hour waiting in 2012
png(file = "Output/ScottishMapHB4Hwaiting2012.png")
ggplot(data = scottish_health_boards4Hwaiting2012) +
geom_sf(aes(fill = percent4Hr)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(55, 100),
guide_legend(title = "% Patients seen \nwithin 4 hours")) +
labs(title = "% Patients seen within 4 hours in 2012 by Scottish Health Board", fill = "percent4Hr") +
#theme_minimal()
theme_void()
dev.off()
ScottishMapHB4Hwaiting2012 <- ggplot(data = scottish_health_boards4Hwaiting2012) +
geom_sf(aes(fill = percent4Hr)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(55, 100),
guide_legend(title = "% Patients seen \nwithin 4 hours")) +
labs(
#title = "% Patients seen within 4 hours in 2012 \nby Scottish Health Board",
fill = "percent4Hr") +
#theme_minimal()
theme_void()
save_plot("Output/ScottishMapHB4Hwaiting2012.svg", fig = ScottishMapHB4Hwaiting2012, width = 12, height = 14)
#Creating a dataframe with 2022 attendance rate data
ae_byboard_Updatedpopulation_2022 <- ae_byboard_Updatedpopulation %>%
filter(Year=="2022")
ae_byboard_Updatedpopulation_2022<- ae_byboard_Updatedpopulation_2022 %>%
select(HBName, Year, NumberOfAttendancesAll, AllAges) %>%
group_by(HBName, Year) %>%
summarise(NumberOfAttendancesAll = sum(NumberOfAttendancesAll),
AllAges = sum(AllAges))
View(ae_4HwaitingbyHB)
View(ae_byboard_Updatedpopulation)
#Calculating attendance rate per pop in 2022 using Chris's updated estimate
ae_byboard_Updatedpopulation_2022$attendanceperpop<-ae_byboard_Updatedpopulation_2022$NumberOfAttendancesAll/ae_byboard_Updatedpopulation_2022$AllAges
#Calculating attendance per 1,000 population using Chris's updated population estimate
ae_byboard_Updatedpopulation_2022$attendanceper1000pop<-ae_byboard_Updatedpopulation_2022$attendanceperpop*1000
#rounding up attendanceper1000pop to 1 decimal point
ae_byboard_Updatedpopulation_2022$attendanceper1000pop<-round(ae_byboard_Updatedpopulation_2022$attendanceper1000pop,digits = 1)
#Creating the dataframe with attendanceper1000pop in 2022 by HB
ae_byboard_Updatedpopulation_2022 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
attendanceper1000pop = c(21.5, 21.2, 25.7, 18.7, 22.2, 16.7, 27.9, 24.1, 24.7, 24.6, 25.1, 27.3, 18.3, 22.9))
scottish_health_boardsUpdatedattendancerate2022 <- scottish_health_boards %>%
left_join(ae_byboard_Updatedpopulation_2022, by="HBName")
#Chloropeth of Scottish attendance rate in 2022 using Chris's updated population estimate
png(file = "Output/ScottishMapUpdatedattendancerate2022.png")
ggplot(data = scottish_health_boardsUpdatedattendancerate2022) +
geom_sf(aes(fill = attendanceper1000pop)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(10, 35),
guide_legend(title = "Attendance rate \nper 1000 population")) +
labs(title = "Attendance rate per 1000 population in 2022 by Scottish health board", fill = "attendanceper1000pop") +
#theme_minimal()
theme_void()
dev.off()
ScottishMapUpdatedattendancerate2022 <- ggplot(data = scottish_health_boardsUpdatedattendancerate2022) +
geom_sf(aes(fill = attendanceper1000pop)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(10, 35),
guide_legend(title = "Attendance rate \nper 1000 population")) +
#labs(title = "Attendance rate per 1000 population in 2022 \nby Scottish health board", fill = "attendanceper1000pop") +
#theme_minimal()
theme_void()
save_plot("Output/ScottishMapUpdatedattendancerate2022.svg", fig = ScottishMapUpdatedattendancerate2022, width = 12, height = 14)
#Creating a dataframe with 2012 attendance rate data
ae_byboard_Updatedpopulation_2012 <- ae_byboard_Updatedpopulation %>%
filter(Year=="2012")
ae_byboard_Updatedpopulation_2012<- ae_byboard_Updatedpopulation_2012 %>%
select(HBName, Year, NumberOfAttendancesAll, AllAges) %>%
group_by(HBName, Year) %>%
summarise(NumberOfAttendancesAll = sum(NumberOfAttendancesAll),
AllAges = sum(AllAges))
#Calculating attendance rate per pop in 2012 using Chris's updated estimate
ae_byboard_Updatedpopulation_2012$attendanceperpop<-ae_byboard_Updatedpopulation_2012$NumberOfAttendancesAll/ae_byboard_Updatedpopulation_2012$AllAges
#Calculating attendance per 1,000 population using Chris's updated population estimate
ae_byboard_Updatedpopulation_2012$attendanceper1000pop<-ae_byboard_Updatedpopulation_2012$attendanceperpop*1000
#rounding up attendanceper1000pop to 1 decimal point
ae_byboard_Updatedpopulation_2012$attendanceper1000pop<-round(ae_byboard_Updatedpopulation_2012$attendanceper1000pop,digits = 1)
#Creating the dataframe with attendanceper1000pop in 2012 by HB
ae_byboard_Updatedpopulation_2012 <- data.frame(
HBName = c("Ayrshire and Arran", "Borders", "Dumfries and Galloway", "Fife","Forth Valley", "Grampian", "Greater Glasgow and Clyde", "Highland", "Lanarkshire", "Lothian", "Orkney", "Shetland", "Tayside", "Western Isles"),
attendanceper1000pop = c(27.2, 19.6, 26.2, 19.9, 20.9, 21.3, 34.0, 25.0, 24.8, 24.8, 12.4, 28.1, 22.7, 25.8))
scottish_health_boardsUpdatedattendancerate2012 <- scottish_health_boards %>%
left_join(ae_byboard_Updatedpopulation_2012, by="HBName")
#Chloropeth of Scottish attendance rate in 2012 using Chris's updated population estimate
png(file = "Output/ScottishMapUpdatedattendancerate2012.png")
ggplot(data = scottish_health_boardsUpdatedattendancerate2012) +
geom_sf(aes(fill = attendanceper1000pop)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(10, 35),
guide_legend(title = "Attendance rate \nper 1000 population")) +
labs(title = "Attendance rate per 1000 population in 2012 by Scottish health board", fill = "attendanceper1000pop") +
#theme_minimal()
theme_void()
dev.off()
ScottishMapUpdatedattendancerate2012 <- ggplot(data = scottish_health_boardsUpdatedattendancerate2012) +
geom_sf(aes(fill = attendanceper1000pop)) +  # Plot the health board regions with fill mapped to your data
geom_sf_text(data = labels_data, aes(label = HBName), size = 3) +  # Add labels
#scale_fill_viridis_c() +  # Optional: Use a nice color scale
scale_fill_continuous(labels = label_comma(), type="viridis",
direction = -1,
limits=c(10, 35),
guide_legend(title = "Attendance rate \nper 1000 population")) +
#labs(title = "Attendance rate per 1000 population in 2012 \nby Scottish health board", fill = "attendanceper1000pop") +
#theme_minimal()
theme_void()
save_plot("Output/ScottishMapUpdatedattendancerate2012.svg", fig = ScottishMapUpdatedattendancerate2012, width = 12, height = 14)
