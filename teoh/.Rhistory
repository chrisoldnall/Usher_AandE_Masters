ggplot(aes(x=NumberOfAttendancesAll))+
geom_histogram()+
labs(x= "Number of A&E Attendances",
y = "Count")
save_plot("Output/HistogramCovid_monthlyae_activitydescriptotal.svg", fig = HistogramCovid_monthlyae_activitydescriptotal, width = 14, height = 12)
HistogramCovid_monthlyae_glmdemographicstotal <- Covid_monthlyae_glmdemographicstotal %>%
ggplot(aes(x=NumberOfAttendances))+
geom_histogram()+
labs(x= "Number of A&E Attendances",
y = "Count")
save_plot("Output/HistogramCovid_monthlyae_glmdemographicstotal.svg", fig = HistogramCovid_monthlyae_glmdemographicstotal, width = 14, height = 12)
library(flexmix)
#install.packages("tidyverse")
#install.packages("here")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("sf")
#install.packages("sjPlot")
#install.packages("pscl")
install.packages("flexmix")
library(flexmix)
#BIC
#with reference to https://www.statology.org/bic-in-r/
BIC(Covidglm_CoviddatesexageSIMDdaytypeHBTimenohour)
#BIC
#with reference to https://www.statology.org/bic-in-r/
BIC(Covidglm_CoviddatesexageSIMDdaytypehourHBTime)
#log likelihood
logLik(Covidglm_CoviddatesexageSIMDdaytypeHBTimenohour)
#log likelihood
#with reference to https://www.statology.org/interpret-log-likelihood/
logLik(Covidglm_CoviddatesexageSIMDdaytypehourHBTime)
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
Covid_monthlyae_glmprop %>%
mutate(sin_term = sin((2*pi*monthnumeric)/12))
Covid_monthlyae_glmdemographicssin_term <- Covid_monthlyae_glmdemographics %>%
mutate(sin_term = sin((2*pi*monthnumeric)/12))
View(Covid_monthlyae_glmdemographicssin_term)
Covid_monthlyae_glmdemographicscos_term <- Covid_monthlyae_glmdemographics %>%
mutate(cos_term = cos((2*pi*monthnumeric)/12))
View(Covid_monthlyae_glmdemographicscos_term)
View(Covid_monthlyae_glmdemographicssin_term)
View(Covid_monthlyae_glmdemographicscos_term)
Covid_monthlyae_glmdemographicssin_term <-Covid_monthlyae_glmdemographicssin_term %>%  select(date, sin_term)
Covid_monthlyae_glmdemographicscos_term <- Covid_monthlyae_glmdemographicscos_term %>% select(date, cos_term)
View(Covid_monthlyae_glmdemographicsdeprivation)
View(Covid_monthlyae_glmdemographicssin_term)
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicssin_term, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicscos_term, by=c("date"))
#To limit the glmwhentotal data to Jan 2018 to Dec 2022.
Covid_monthlyae_glmwhentotal <- Covid_monthlyae_glmwhentotal %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
View(Covid_monthlyae_glmprop)
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicscos_term, by=c("date"))
#To limit the glmdemographicstotal data to Jan 2018 to Dec 2022.
Covid_monthlyae_glmdemographicstotal <- Covid_monthlyae_glmdemographicstotal %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
#To limit the glmwhentotal data to Jan 2018 to Dec 2022.
Covid_monthlyae_glmwhentotal <- Covid_monthlyae_glmwhentotal %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
View(Covid_monthlyae_glmprop)
View(Covid_monthlyae_glmprop)
View(Covid_monthlyae_glmprop)
View(Covid_monthlyae_glmprop)
View(ae_4HwaitingbyHB)
View(ae_4HwaitingbyHB)
rm(ae_4HwaitingbyHB_2012)
rm(ae_4HwaitingbyHB_2022, ae_4HwaitingbyHB, ae_4HwaitingbyHB_2022reorder, ae_attendance_Glasgow20182023)
rm(ae_byboard, ae_byboard_population, ae_byboardUpdatedpopulation, ae_byboard_Updatedpopulation_2012, ae_byboard_Updatedpopulation_2022)
rm(ae_byboard_Updatedpopulation, ae_byboard2018to2023, ae_byboard2018to2023_proportions, ae_byboard2018to2023_proportionsnewdate)
rf(ae_monthly_attendance, ae_monthly_attendance_proportions, ae_monthly_attendance_proportionsnewdate, ae_monthly_Glasgow20182023, ae_monthly_total)
rm(ae_monthly_attendance, ae_monthly_attendance_proportions, ae_monthly_attendance_proportionsnewdate, ae_monthly_Glasgow20182023, ae_monthly_total)
rm(ae_monthly_total_2018to2023, ae_monthly_totalJan2019toDec2022, ae_monthly_totalmid2019to2023)
rm(aeHBwaiting4Hr2012, aeHBwaiting4Hr2022, aeScotland2019, aeScotland2020, aeScotland2021, aeScotland2022, aeScotlandJan2019toDec2022, aeScotlandmid2019to2023)
#to limit the dates to 1 Jan 2018 to 31 Dec 2022 because this object is very big, takes up too much memory
Covid_monthlyae_glmdemographicssin_term <- Covid_monthlyae_glmdemographicssin_term %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
Covid_monthlyae_glmdemographicscos_term <- Covid_monthlyae_glmdemographicscos_term %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicscos_term, by=c("date"))
#To limit the glmdemographicstotal data to Jan 2018 to Dec 2022.
Covid_monthlyae_glmdemographicstotal <- Covid_monthlyae_glmdemographicstotal %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
#To limit the glmwhentotal data to Jan 2018 to Dec 2022.
Covid_monthlyae_glmwhentotal <- Covid_monthlyae_glmwhentotal %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
#To include Time into the data frame
#example given: df$Time <- as.numeric(df$Date - min(df$Date)) + 1
Covid_monthlyae_glmprop <- Covid_monthlyae_glmprop %>%
mutate(Time = as.numeric(Covid_monthlyae_glmprop$date - min(Covid_monthlyae_glmprop$date)) + 1)
View(Covid_monthlyae_glmprop)
rm(Age_ED_LM, agegroupHB, agegroupScot, agegroupScot_monthtotal, agegroupScot_proportions, agegroupScot_proportions_forcor, agegroupScotAE, agegroupScotED, agegroupScotMIUOther)
rm(arrivalhrScot, arrivalhrScot_hourtotal, arrivalhrScot_proportions, arrivalhrScot_proportions_forcor, arrivalhrScotEDwkdy, arrivalhrScotEDwkdyheatmap1, arrivalhrScotEDwkdyheatmap2)
rm(arrivalhrScotEDwknd, arrivalhrScotMIUOtherwkdy, arrivalhrScotMIUOtherwknd, arrivalhrScotEDwkndheatmap1, arrivalhrScotEDwkndheatmap2)
rm(HB_ED_LM, HistogramAEattendancesbyDeptType, HistogramAEattendancesbyDeptType_vline, ScottishMapHB4Hwaiting2012, ScottishMapHB4Hwaiting2022, ScottishMapHBPopulation2022, ScottishMapUpdatedattendancerate2012, ScottishMapUpdatedattendancerate2022)
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicscos_term, by=c("date"))
rm(arrivalhrScotMIUOtherwkdyheatmap1, arrivalhrScotMIUOtherwkdyheatmap2, arrivalhrScotMIUOtherwkdyscaledheatmap1, arrivalhrScotMIUOtherwkdyscaledheatmap2, arrivalhrScotMIUOtherwkndheatmap1, arrivalhrScotMIUOtherwkndheatmap2, arrivalhrScotMIUOtherwkndscaledheatmap1, arrivalhrScotMIUOtherwkndscaledheatmap2)
rm(attendance_monthenddate, attendance_monthenddateED, attendance_monthenddateMIUOther, attendanceEDmonthyearheatmap1, attendanceEDmonthyearheatmap2, attendanceEDmonthyearscaledheatmap1, attendanceEDmonthyearscaledheatmap2)
rm(attendanceMIUmonthyearheatmap1, attendanceMIUmonthyearheatmap2, attendanceMIUmonthyearscaledheatmap1, attendanceMIUmonthyearscaledheatmap2, attendancemonthyearheatmap1, attendancemonthyearheatmap2)
rm(Attendanceratetotalbysex, Attendances_stats, AttendancesbyHBper1000Updatedpop_nocolour, AttendanceTotal, coefficients_df)
rm(dataforecast1, dataforecast2, Dayofweek_ED_LM, deprivation, Deprivation_ED_LM, deprivationScot, deprivationScot_monthtotal, deprivationScot_proportions)
rm(dischargedestination, dischargedestination_bydischarge, ED_whoattends_sex, EDFife2022_deprivation, Edinburgh_Islay, Edinburgh_Islay_plot, EDJuly_when_dayofweek, EDLothian_agegroup, fourHwaitingbyHB_nocolour, Glasgow_glmproportions, Glasgow_glmproportions_July23age, Glasgow_glmproportions_July23sex)
rm(Glasgow_glmproportions_July23simd, Glasgow_glmproportions_July23type, Glasgow_Predictvsactual_Aug23Jan24, Glasgow_rates2018to2023, Glasgow_rates2018to2023month, Glasgow_Updatespopulation2018to2023, Glasgow_Updatespopulation2018to2023month)
rm(Glasgow_predict_rates2018to2023, Glasgow_Predictvsactual_Aug23toJan24, GlasgowAug23Time, GlasgowOct23Time, GlasgowSept23Time, glm_sex, glm_sexage, glm_sexageSIMD, glm_sexageSIMDday, glm_sexageSIMDdaytype, glm_sexageSIMDdaytypehour)
rm(glm_sexageSIMDdaytypehourHB, glm_sexageSIMDdaytypehourHBmonth, glm_sexageSIMDdaytypehourHBmonthTime)
rm(glm_sexageSIMDdaytypehourHBTime, glm_sexageSIMDdaytypehourHBupdatedmonth, glm_sexageSIMDdaytypehourHBupdatedmonthTime, glmsexageprediction, glmsexageSIMDdayprediction, glmsexageSIMDdaytypehourHBmonthprediction, glmsexageSIMDdaytypehourHBmonthpredictionallinone)
rm(whoattends_sex, whoattends_sex_monthtotal, whoattends_sex_proportions, whoattends_sex_total, whoattends_sexHB)
rm(when_dayofweek, when_dayofweek_monthtotal, when_dayofweek_proportions)
rm(sexagesimddayhourdepttype_proportions, sexagesimddayhourdepttypeHB_proportions, sexagesimddayhourdepttypeHB_proportionsglmplot, sexagesimddayhourdepttypeHBmonthTime_proportions)
rm(sexagesimddayhourdepttypeHBmonth_proportions, sexagesimddayhourdepttypeHBmonth_proportionsglmplot, sexagesimddayhourdepttypeHBTime_proportions, sexagesimddayhourdepttypeHBTime_proportions, sexagesimddayhourdepttypeHBTime_proportionsglmplot)
rm(sexagesimddayhourdepttypeHBupdatedmonth_proportions, sexagesimddayhourdepttypeHBupdatedmonth_proportionsglmplot, sexagesimddayhourdepttypeHBupdatedmonthTime_proportions, Sex_ED_LM, Sex_Type_LM)
rm(ScotUpdatespopulation2018to2023glmplot, scottish_health_boardsUpdatedattendancerate2022, scottish_health_boardsUpdatedattendancerate2012, scottish_health_boards4Hwaiting2022, scottish_health_boards4Hwaiting2012, scottish_health_boards_pop2022, scottish_health_boards)
rm(ScotSept23updatedmonth, ScotSept23, Scotpopulation2018to2022Covidglmplot, ScotOct23updatedmonth, ScotOct23, ScotNov23, ScotNov23updatedmonth, ScotJan24, ScotJan24updatedmonth, ScotDec23, ScotDec23updatedmonth, ScotAug23, ScotAug23updatedmonth)
rm(Scot_MIUOther_attendancerate_agegroup_legendbottom, Scot_MIUOther_attendancerate_agegroup, Scot_ED_attendancerate_agegroup_legendbottom, Scot_ED_attendancerate_agegroup, Scot_AE_attendancerate_agegroup_legendbottom, Scot_AE_attendancerate_agegroup)
rm(Orkney_Predictvsactual_Aug23Jan24, Orkney_Glasgow_rates2018to2023, Orkney_Updatespopulation2018to2023, Orkney_Updatespopulation2018to2023month, OrkneyAug23, OrkneyAug23Time, Orkney_rates2018to2023month,OrkneyAug23, OrkneyAug23Time, OrkneyOct23Time, OrkneySept23Time)
rm(Grampian_Lothian_WesternIsle, Grampian_Lothian_WesternIsle_population, Grampian_Lothian_WesternIsle_Updatedpopulation, Grampian_Lothian_WesternIsleAE, Grampian_Lothian_WesternIsleAEwithpop, Grampian_Lothian_WesternIsles_per1000Updatedpop)
rm(modelsex, modelsexage, modelsexageSIMD, modelsexageSIMDday, modelsexageSIMDdaytype, modelsexageSIMDdaytypehour, modelsexageSIMDdaytypehourHB, modelsexageSIMDdaytypehourHBmonth)
rm(monthattendances_proportions, monthattendances_proportions2018, monthattendances_proportions20182023, monthattendances_proportions20182023wide, monthattendances_proportions20182023wideJantoDec, monthattendances_proportions2019, monthattendances_proportions2020, monthattendances_proportions2021, monthattendances_proportions2022, monthattendances_proportions2023)
rm(Orkney_rates2018to2023, Orkney_Glasgow_rates2018to2023month, Orkney_Glasgow_predict_rates2018to2023, Orkney_Glasgow_predict_rates2018to2023month, OrkneyGlasgow_Predictvsactual_Sept23Jan24, Orkney_Predictvsactual_Aug23toJan24)
rn(Orkney_predict_rates2018to2023, monthattendances_Updatedproportions, Month_ED_LM, MIU_whoattends_sex)
rm(Orkney_predict_rates2018to2023, monthattendances_Updatedproportions, Month_ED_LM, MIU_whoattends_sex)
rm(glmsexageSIMDdaytypehourHBprediction, glmsexageSIMDdaytypehourHBpredictionallinone, glmsexageSIMDdaytypehourHBTimeprediction, glmsexageSIMDdaytypehourHBupdatedmonthprediction, glmsexageSIMDdaytypehourHBupdatedmonthpredictionallinone, glmsexageSIMDdaytypehourprediction, glmsexageSIMDdaytypeprediction)
rm(glmsexageSIMDprediction, glmsexprediction, HBUpdatespopulation_estimate, HBUpdatespopulation_estimate_HBname, HBUpdatespopulation_estimate_HBname2022, HBUpdatespopulation_estimate_HBname2022_data, Month_2018to2023)
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicscos_term, by=c("date"))
memory.size()
memory.limit
memory.size(max=FALSE)
rm(aic_values_glm, aic_values_lmglm, GlasgowAug23Month_attendancerate)
rm(GlasgowAug23Time_attendancerate, GlasgowDec23Month_attendancerate, GlasgowDec23Time_attendancerate, GlasgowNov23Month_attendancerate, GlasgowNov23Time_attendancerate, GlasgowOct23Month_attendancerate, GlasgowOct23Time_attendancerate, GlasgowSept23Month_attendancerate, GlasgowSept23Time_attendancerate, GlasgowJan24Time_attendancerate)
rm(OrkneyAug23Time_attendancerate, OrkneyDec23Month_attendancerate, OrkneyJan24Time_attendancerate, OrkneyAug23Month_attendancerate, OrkneyDec23Time_attendancerate, OrkneySept23Time_attendancerate, OrkneyNov23Time_attendancerate, OrkneyNov23Month_attendancerate, OrkneyOct23Month_attendancerate)
rm(OrkneyOct23Time_attendancerate, OrkneyJan24Month_attendancerate, OrkneySept23Month_attendancerate, modelsex_aic, modelsexage_aic, modelsexageSIMD_aic, modelsexageSIMDday_aic, modelsexageSIMDdaytype_aic, modelsexageSIMDdaytypehour_aic, modelsexageSIMDdaytypehourHB_aic, modelsexageSIMDdaytypehourHBmonth_aic)
rm(glm_sex_aic, glm_sex_predictions, glm_sexage_predictions, glm_sexageSIMD_predictions, glm_sexageSIMDday_predictions, glm_sexageSIMDdaytype_predictions, glm_sexageSIMDdaytypehour_predictions, glm_sexageSIMDdaytypehourHB_predictions, glm_sexageSIMDdaytypehourHBmonth_predictions, glm_sexageSIMDdaytypehourHBTime_predictions)
rm(glm_sexage_aic, glm_sexageSIMD_aic, glm_sexageSIMDday_aic, glm_sexageSIMDdaytype_aic, glm_sexageSIMDdaytypehour_aic, glm_sexageSIMDdaytypehourHB_aic, glm_sexageSIMDdaytypehourHBmonth_aic, glm_sexageSIMDdaytypehourHBTime_aic, glm_sexageSIMDdaytypehourHBupdatedmonth_aic, glm_sexageSIMDdaytypehourHBupdatedmonth_predictions)
rm(GlasgowJan24Month_attendancerate, min_aic_model_glm, min_aic_model_lmglm, coefficients, exp_coef_glm_sexageSIMDdaytypehourHBmonth, exp_coef_glm_sexageSIMDdaytypehourHBTime, exp_coefficients )
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicscos_term, by=c("date"))
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
Covid_monthlyae_glmdemographics <- read_csv(here("Rawdata", "monthlyae_demographics_202406.csv"))
#To create a date column
#creating a new column for Year, monthnumeric and day using data from the Month column
Covid_monthlyae_glmdemographics$Year <- substr(Covid_monthlyae_glmdemographics$Month, 1,4)
Covid_monthlyae_glmdemographics$monthnumeric <- substr(Covid_monthlyae_glmdemographics$Month, 5,6)
Covid_monthlyae_glmdemographics$day <- "01"
#converting from character to numeric variable
Covid_monthlyae_glmdemographics$Year <- as.numeric(Covid_monthlyae_glmdemographics$Year)
Covid_monthlyae_glmdemographics$monthnumeric <- as.numeric(Covid_monthlyae_glmdemographics$monthnumeric)
Covid_monthlyae_glmdemographics$day <- as.numeric(Covid_monthlyae_glmdemographics$day)
#making a date column using the Year, monthnumeric and day columns
Covid_monthlyae_glmdemographics<- Covid_monthlyae_glmdemographics %>%
mutate(date=make_date(Year, monthnumeric, day))
str(Covid_monthlyae_glmdemographics)
#calculating total attendances
Covid_monthlyae_glmdemographicstotal <- Covid_monthlyae_glmdemographics %>%
select(date, NumberOfAttendances) %>%
group_by(date) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#AGE
#calculating total attendances by age groups
Covid_monthlyae_glmdemographicsage <- Covid_monthlyae_glmdemographics %>%
select(date, Age, NumberOfAttendances) %>%
group_by(date, Age) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#renaming all na age to unknown
Covid_monthlyae_glmdemographicsage <- Covid_monthlyae_glmdemographicsage %>% replace_na(list(Age="UnknownAge"))
#merge age group attendances with total attendances to calculate proportion
Covid_monthlyae_glmdemographicsage <- merge(Covid_monthlyae_glmdemographicsage, Covid_monthlyae_glmdemographicstotal, by=c("date"))
#changing column names so it is clear which is total and which is for age
colnames(Covid_monthlyae_glmdemographicsage)<- c("date", "Age","AgeAttendances","TotalAttendances")
#to calculate the proportion for each age
Covid_monthlyae_glmdemographicsage$Proportions <-Covid_monthlyae_glmdemographicsage$AgeAttendances/Covid_monthlyae_glmdemographicsage$TotalAttendances
Covid_monthlyae_glmdemographicsage <- Covid_monthlyae_glmdemographicsage %>% select(date,Age,Proportions)
#to change the data from a long to a wide format
Covid_monthlyae_glmdemographicsage <- pivot_wider(Covid_monthlyae_glmdemographicsage, names_from = Age, values_from = Proportions)
#renaming the column names so that they can be added to the linear model
Covid_monthlyae_glmdemographicsage <- Covid_monthlyae_glmdemographicsage %>%
rename(c("Under18" = "Under 18",
"EighteentoTwentyfour" = "18-24",
"TwentyfivetoThirtynine" = "25-39",
"FortytoSixtyfour" = "40-64",
"SixtyfivetoSeventyfour" = "65-74",
"Seventyfiveplus" = "75 plus"))
str(Covid_monthlyae_glmdemographicsage)
#SEX
#calculating total attendances by sex
Covid_monthlyae_glmdemographicssex <- Covid_monthlyae_glmdemographics %>%
select(date, Sex, NumberOfAttendances) %>%
group_by(date, Sex) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#renaming all na age to unknown
Covid_monthlyae_glmdemographicssex <- Covid_monthlyae_glmdemographicssex %>% replace_na(list(Sex="UnknownSex"))
#merge sex attendances with total attendances to calculate proportion
Covid_monthlyae_glmdemographicssex <- merge(Covid_monthlyae_glmdemographicssex, Covid_monthlyae_glmdemographicstotal, by=c("date"))
#changing column names so it is clear which is total and which is for age
colnames(Covid_monthlyae_glmdemographicssex)<- c("date", "Sex","SexAttendances","TotalAttendances")
#to calculate the proportion for each age
Covid_monthlyae_glmdemographicssex$Proportions <-Covid_monthlyae_glmdemographicssex$SexAttendances/Covid_monthlyae_glmdemographicssex$TotalAttendances
Covid_monthlyae_glmdemographicssex <- Covid_monthlyae_glmdemographicssex %>% select(date,Sex,Proportions)
#to change the data from a long to a wide format
Covid_monthlyae_glmdemographicssex <- pivot_wider(Covid_monthlyae_glmdemographicssex, names_from = Sex, values_from = Proportions)
str(Covid_monthlyae_glmdemographicssex)
#DEPRIVATION
#calculating total attendances by deprivation
Covid_monthlyae_glmdemographicsdeprivation <- Covid_monthlyae_glmdemographics %>%
select(date, Deprivation, NumberOfAttendances) %>%
group_by(date, Deprivation) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#renaming all na deprivation to unknown
str(Covid_monthlyae_glmdemographicsdeprivation)
#have to change Deprivation from double to character before changing na to unknown
Covid_monthlyae_glmdemographicsdeprivation$Deprivation <- as.character(Covid_monthlyae_glmdemographicsdeprivation$Deprivation)
Covid_monthlyae_glmdemographicsdeprivation <- Covid_monthlyae_glmdemographicsdeprivation %>% replace_na(list(Deprivation="UnknownSIMD"))
#merge deprivation attendances with total attendances to calculate proportion
Covid_monthlyae_glmdemographicsdeprivation <- merge(Covid_monthlyae_glmdemographicsdeprivation, Covid_monthlyae_glmdemographicstotal, by=c("date"))
#changing column names so it is clear which is total and which is for deprivation
colnames(Covid_monthlyae_glmdemographicsdeprivation)<- c("date", "SIMD","SIMDAttendances","TotalAttendances")
#to calculate the proportion for each deprivation
Covid_monthlyae_glmdemographicsdeprivation$Proportions <-Covid_monthlyae_glmdemographicsdeprivation$SIMDAttendances/Covid_monthlyae_glmdemographicsdeprivation$TotalAttendances
Covid_monthlyae_glmdemographicsdeprivation <- Covid_monthlyae_glmdemographicsdeprivation %>% select(date,SIMD,Proportions)
#to change the data from a long to a wide format
Covid_monthlyae_glmdemographicsdeprivation <- pivot_wider(Covid_monthlyae_glmdemographicsdeprivation, names_from = SIMD, values_from = Proportions)
#changing SIMD column names to be clearer
colnames(Covid_monthlyae_glmdemographicsdeprivation)<- c("date", "SIMD1","SIMD2","SIMD3", "SIMD4", "SIMD5", "UnknownSIMD")
str(Covid_monthlyae_glmdemographicsdeprivation)
#SIN and COS terms
#To include sin and cos of month into the data frame
Covid_monthlyae_glmdemographicssin_term <- Covid_monthlyae_glmdemographics %>%
mutate(sin_term = sin((2*pi*monthnumeric)/12))
Covid_monthlyae_glmdemographicssin_term <-Covid_monthlyae_glmdemographicssin_term %>%  select(date, sin_term)
Covid_monthlyae_glmdemographicscos_term <- Covid_monthlyae_glmdemographics %>%
mutate(cos_term = cos((2*pi*monthnumeric)/12))
Covid_monthlyae_glmdemographicscos_term <- Covid_monthlyae_glmdemographicscos_term %>% select(date, cos_term)
#to limit the dates to 1 Jan 2018 to 31 Dec 2022 because this object is very big, takes up too much memory
Covid_monthlyae_glmdemographicssin_term <- Covid_monthlyae_glmdemographicssin_term %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
Covid_monthlyae_glmdemographicscos_term <- Covid_monthlyae_glmdemographicscos_term %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2022-12-31")))
#DEPARTMENT TYPE
#calculating total attendances by department type
Covid_monthlyae_glmdemographicsdepttype <- Covid_monthlyae_glmdemographics %>%
select(date, DepartmentType, NumberOfAttendances) %>%
group_by(date, DepartmentType) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#merge dept type attendances with total attendances to calculate proportion
Covid_monthlyae_glmdemographicsdepttype <- merge(Covid_monthlyae_glmdemographicsdepttype, Covid_monthlyae_glmdemographicstotal, by=c("date"))
#changing column names so it is clear which is total and which is for depttype
colnames(Covid_monthlyae_glmdemographicsdepttype)<- c("date", "DepartmentType","DepttypeAttendances","TotalAttendances")
#to calculate the proportion for each depttype
Covid_monthlyae_glmdemographicsdepttype$Proportions <-Covid_monthlyae_glmdemographicsdepttype$DepttypeAttendances/Covid_monthlyae_glmdemographicsdepttype$TotalAttendances
Covid_monthlyae_glmdemographicsdepttype <- Covid_monthlyae_glmdemographicsdepttype %>% select(date,DepartmentType,Proportions)
#to change the data from a long to a wide format
Covid_monthlyae_glmdemographicsdepttype <- pivot_wider(Covid_monthlyae_glmdemographicsdepttype, names_from = DepartmentType, values_from = Proportions)
#changing column names to ED and MIU
colnames(Covid_monthlyae_glmdemographicsdepttype)<- c("date", "ED","MIU/Other")
str(Covid_monthlyae_glmdemographicsdepttype)
#HEALTH BOARD
#calculating total attendances by health board
Covid_monthlyae_glmdemographicsHB <- Covid_monthlyae_glmdemographics %>%
select(date, HBT, NumberOfAttendances) %>%
group_by(date, HBT) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#merge HB attendances with total attendances to calculate proportion
Covid_monthlyae_glmdemographicsHB <- merge(Covid_monthlyae_glmdemographicsHB, Covid_monthlyae_glmdemographicstotal, by=c("date"))
#changing column names so it is clear which is total and which is for HB
colnames(Covid_monthlyae_glmdemographicsHB)<- c("date", "HBT","HBAttendances","TotalAttendances")
#to calculate the proportion for each depttype
Covid_monthlyae_glmdemographicsHB$Proportions <-Covid_monthlyae_glmdemographicsHB$HBAttendances/Covid_monthlyae_glmdemographicsHB$TotalAttendances
Covid_monthlyae_glmdemographicsHB <- Covid_monthlyae_glmdemographicsHB %>% select(date,HBT,Proportions)
#to change the data from a long to a wide format
Covid_monthlyae_glmdemographicsHB <- pivot_wider(Covid_monthlyae_glmdemographicsHB, names_from = HBT, values_from = Proportions)
Covid_monthlyae_glmdemographicsHB <- Covid_monthlyae_glmdemographicsHB %>%
rename(c("NHSAyrshireandArran" = "S08000015",
"NHSBorders" = "S08000016",
"NHSDumfriesandGalloway" = "S08000017",
"NHSForthValley" = "S08000019",
"NHSGrampian" = "S08000020",
"NHSHighland" = "S08000022",
"NHSLothian" = "S08000024",
"NHSOrkney" = "S08000025",
"NHSShetland" = "S08000026",
"NHSWesternIsles" = "S08000028",
"NHSFife" = "S08000029",
"NHSTayside" = "S08000030",
"NHSGreaterGlasgowandClyde" = "S08000031",
"NHSLanarkshire" = "S08000032"))
#COVIDdates
#Attribute
#1 Lockdown
#2 Tightening of restrictions
#3 Easing of restrictions
#4 No or most legal restrictions removed
Covid_monthlyae_glmdemographicsCoviddate <- Covid_monthlyae_glmdemographics %>%
select(date, NumberOfAttendances) %>%
group_by(date) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#To add a columns for Coviddate and populate - deprecated
#Tried using the date range to populate but it didn't work, so did it in batches below and combined them together
#Covid_monthlyae_glmdemographicsCoviddate <- Covid_monthlyae_glmdemographicsCoviddate %>%
#  mutate(Coviddate = ifelse(.$date==between(date, as.Date('2018-01-01'), as.Date('2020-03-31'), '4', '0')),
#         Coviddate = ifelse(.$date==between(date, as.Date('2020-04-01'), as.Date('2020-05-31'), '1', '0')),
#         Coviddate = ifelse(.$date==between(date, as.Date('2020-06-01'), as.Date('2020-09-30'), '3', '0')),
#         Coviddate = ifelse(.$date==between(date, as.Date('2020-10-01'), as.Date('2020-12-31'), '2', '0')),
#         Coviddate = ifelse(.$date==between(date, as.Date('2021-01-01'), as.Date('2021-04-30'), '1', '0')),
#         Coviddate = ifelse(.$date==between(date, as.Date('2021-05-01'), as.Date('2021-07-31'), '3', '0')),
#         Coviddate = ifelse(.$date==between(date, as.Date('2021-08-01'), as.Date('2024-06-31'), '4', '0')))
#Covid_monthlyae_glmdemographicsCoviddate <- Covid_monthlyae_glmdemographicsCoviddate %>%
#  mutate(Coviddate4 = ifelse((.$date==between(date, as.Date('2018-01-01'), as.Date('2020-03-31')), '1', '0')),
#         Coviddate1 = ifelse((.$date==between(date, as.Date('2020-04-01'), as.Date('2020-05-31')), '1', '0')),
#         Coviddate3 = ifelse((.$date==between(date, as.Date('2020-06-01'), as.Date('2020-09-30')), '1', '0')),
#         Coviddate2 = ifelse((.$date==between(date, as.Date('2020-10-01'), as.Date('2020-12-31')), '1', '0')))
# Coviddate1 = ifelse(.$date==between(date, as.Date('2021-01-01'), as.Date('2021-04-30'), '1', '0')),
# Coviddate3 = ifelse(.$date==between(date, as.Date('2021-05-01'), as.Date('2021-07-31'), '1', '0')),
# Coviddate4 = ifelse(.$date==between(date, as.Date('2021-08-01'), as.Date('2024-06-31'), '1', '0')))
#Populating each batch of date ranges individually
Covid_monthlyae_glmdemographicsCoviddate_a <- Covid_monthlyae_glmdemographicsCoviddate %>%
filter(between(date, as.Date('2018-01-01'), as.Date('2020-03-31'))) %>%
mutate(Coviddate1 = 0,
Coviddate2 = 0,
Coviddate3 = 0,
Coviddate4 = 1)
Covid_monthlyae_glmdemographicsCoviddate_b <- Covid_monthlyae_glmdemographicsCoviddate %>%
filter(between(date, as.Date('2020-04-01'), as.Date('2020-05-31'))) %>%
mutate(Coviddate1 = 1,
Coviddate2 = 0,
Coviddate3 = 0,
Coviddate4 = 0)
Covid_monthlyae_glmdemographicsCoviddate_c <- Covid_monthlyae_glmdemographicsCoviddate %>%
filter(between(date, as.Date('2020-06-01'), as.Date('2020-09-30'))) %>%
mutate(Coviddate1 = 0,
Coviddate2 = 0,
Coviddate3 = 1,
Coviddate4 = 0)
Covid_monthlyae_glmdemographicsCoviddate_d <- Covid_monthlyae_glmdemographicsCoviddate %>%
filter(between(date, as.Date('2020-10-01'), as.Date('2020-12-31'))) %>%
mutate(Coviddate1 = 0,
Coviddate2 = 1,
Coviddate3 = 0,
Coviddate4 = 0)
Covid_monthlyae_glmdemographicsCoviddate_e <- Covid_monthlyae_glmdemographicsCoviddate %>%
filter(between(date, as.Date('2021-01-01'), as.Date('2021-04-30'))) %>%
mutate(Coviddate1 = 1,
Coviddate2 = 0,
Coviddate3 = 0,
Coviddate4 = 0)
Covid_monthlyae_glmdemographicsCoviddate_f <- Covid_monthlyae_glmdemographicsCoviddate %>%
filter(between(date, as.Date('2021-05-01'), as.Date('2021-07-31'))) %>%
mutate(Coviddate1 = 0,
Coviddate2 = 0,
Coviddate3 = 1,
Coviddate4 = 0)
Covid_monthlyae_glmdemographicsCoviddate_g <- Covid_monthlyae_glmdemographicsCoviddate %>%
filter(between(date, as.Date('2021-08-01'), as.Date('2024-06-30'))) %>%
mutate(Coviddate1 = 0,
Coviddate2 = 0,
Coviddate3 = 0,
Coviddate4 = 1)
#Combining all the batches of date ranges for Covid into one dataframe
Covid_monthlyae_glmdemographicsCoviddate_all <- rbind(Covid_monthlyae_glmdemographicsCoviddate_a, Covid_monthlyae_glmdemographicsCoviddate_b)
Covid_monthlyae_glmdemographicsCoviddate_all <- rbind(Covid_monthlyae_glmdemographicsCoviddate_all, Covid_monthlyae_glmdemographicsCoviddate_c)
Covid_monthlyae_glmdemographicsCoviddate_all <- rbind(Covid_monthlyae_glmdemographicsCoviddate_all, Covid_monthlyae_glmdemographicsCoviddate_d)
Covid_monthlyae_glmdemographicsCoviddate_all <- rbind(Covid_monthlyae_glmdemographicsCoviddate_all, Covid_monthlyae_glmdemographicsCoviddate_e)
Covid_monthlyae_glmdemographicsCoviddate_all <- rbind(Covid_monthlyae_glmdemographicsCoviddate_all, Covid_monthlyae_glmdemographicsCoviddate_f)
Covid_monthlyae_glmdemographicsCoviddate_all <- rbind(Covid_monthlyae_glmdemographicsCoviddate_all, Covid_monthlyae_glmdemographicsCoviddate_g)
#When
Covid_monthlyae_glmwhen <- read_csv(here("Rawdata", "monthlyae_when_202406.csv"))
#To create a date column
#creating a new column for Year, monthnumeric and day using data from the Month column
Covid_monthlyae_glmwhen$Year <- substr(Covid_monthlyae_glmwhen$Month, 1,4)
Covid_monthlyae_glmwhen$monthnumeric <- substr(Covid_monthlyae_glmwhen$Month, 5,6)
Covid_monthlyae_glmwhen$day <- "01"
#converting from character to numeric variable
Covid_monthlyae_glmwhen$Year <- as.numeric(Covid_monthlyae_glmwhen$Year)
Covid_monthlyae_glmwhen$monthnumeric <- as.numeric(Covid_monthlyae_glmwhen$monthnumeric)
Covid_monthlyae_glmwhen$day <- as.numeric(Covid_monthlyae_glmwhen$day)
#making a date column using the Year, monthnumeric and day columns
Covid_monthlyae_glmwhen<- Covid_monthlyae_glmwhen%>%
mutate(date=make_date(Year, monthnumeric, day))
str(Covid_monthlyae_glmwhen)
#calculating total attendances
Covid_monthlyae_glmwhentotal <- Covid_monthlyae_glmwhen %>%
select(date, NumberOfAttendances) %>%
group_by(date) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#DAY
#calculating total attendances by day
Covid_monthlyae_glmwhenday <- Covid_monthlyae_glmwhen %>%
select(date, Day, NumberOfAttendances) %>%
group_by(date, Day) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#merge day attendances with total attendances to calculate proportion
Covid_monthlyae_glmwhenday <- merge(Covid_monthlyae_glmwhenday, Covid_monthlyae_glmwhentotal, by=c("date"))
#changing column names so it is clear which is total and which is for day
colnames(Covid_monthlyae_glmwhenday)<- c("date", "Day","DayAttendances","TotalAttendances")
#to calculate the proportion for each day
Covid_monthlyae_glmwhenday$Proportions <-Covid_monthlyae_glmwhenday$DayAttendances/Covid_monthlyae_glmwhenday$TotalAttendances
Covid_monthlyae_glmwhenday <- Covid_monthlyae_glmwhenday %>% select(date,Day,Proportions)
#to change the data from a long to a wide format
Covid_monthlyae_glmwhenday <- pivot_wider(Covid_monthlyae_glmwhenday, names_from = Day, values_from = Proportions)
str(Covid_monthlyae_glmwhenday)
#HOUR
#calculating total attendances by hour
Covid_monthlyae_glmwhenhour <- Covid_monthlyae_glmwhen %>%
select(date, Hour, NumberOfAttendances) %>%
group_by(date, Hour) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#merge hour attendances with total attendances to calculate proportion
Covid_monthlyae_glmwhenhour <- merge(Covid_monthlyae_glmwhenhour, Covid_monthlyae_glmwhentotal, by=c("date"))
#changing column names so it is clear which is total and which is for hour
colnames(Covid_monthlyae_glmwhenhour)<- c("date", "Hour","HourAttendances","TotalAttendances")
#to calculate the proportion for each hour
Covid_monthlyae_glmwhenhour$Proportions <-Covid_monthlyae_glmwhenhour$HourAttendances/Covid_monthlyae_glmwhenhour$TotalAttendances
Covid_monthlyae_glmwhenhour <- Covid_monthlyae_glmwhenhour %>% select(date,Hour,Proportions)
#to change the data from a long to a wide format
Covid_monthlyae_glmwhenhour <- pivot_wider(Covid_monthlyae_glmwhenhour, names_from = Hour, values_from = Proportions)
Covid_monthlyae_glmwhenhour <- Covid_monthlyae_glmwhenhour %>%
rename(c("Midnighttoone" = "00:00 to 00:59",
"Onetotwoam" = "01:00 to 01:59",
"Twotothreeam" = "02:00 to 02:59",
"Threetofouram" = "03:00 to 03:59",
"Fourtofiveam" = "04:00 to 04:59",
"Fivetosixam" = "05:00 to 05:59",
"Sixtosevenam" = "06:00 to 06:59",
"Seventoeightam" = "07:00 to 07:59",
"Eighttonineam" = "08:00 to 08:59",
"Ninetotenam" = "09:00 to 09:59",
"Tentoelevenam" = "10:00 to 10:59",
"Eleventonoon" = "11:00 to 11:59",
"Noontoonepm" = "12:00 to 12:59",
"Onetotwopm" = "13:00 to 13:59",
"Twotothreepm" = "14:00 to 14:59",
"Threetofourpm" = "15:00 to 15:59",
"Fourtofivepm" = "16:00 to 16:59",
"Fivetosixpm" = "17:00 to 17:59",
"Sixtosevenpm" = "18:00 to 18:59",
"Seventoeightpm" = "19:00 to 19:59",
"Eighttoninepm" = "20:00 to 20:59",
"Ninetotenpm" = "21:00 to 21:59",
"Tentoelevenpm" = "22:00 to 22:59",
"Eleventomidnight" = "23:00 to 23:59"))
str(Covid_monthlyae_glmwhenhour)
#MONTH
#29 April 2024- Chris advised that if using month, shouldn't calculate proportion based on year's attendance. Should show as 1 if it's that month, and 0 for others.
Covid_monthlyae_glmwhenmonth <- Covid_monthlyae_glmwhen %>%
select(date, monthnumeric, NumberOfAttendances) %>%
group_by(date) %>%
summarise(NumberOfAttendances=sum(NumberOfAttendances))
#adding a new column for monthnumeric
Covid_monthlyae_glmwhenmonth$monthnumeric <-as.numeric(format(Covid_monthlyae_glmwhenmonth$date, "%m"))
#To set up the proportions for each month as a separate column
Covid_monthlyae_glmwhenmonth <- Covid_monthlyae_glmwhenmonth %>%
mutate(Jan = ifelse(.$monthnumeric=='1', '1', '0'),
Feb = ifelse(.$monthnumeric=='2', '1', '0'),
March = ifelse(.$monthnumeric=='3', '1', '0'),
April = ifelse(.$monthnumeric=='4', '1', '0'),
May = ifelse(.$monthnumeric=='5', '1', '0'),
June = ifelse(.$monthnumeric=='6', '1', '0'),
July = ifelse(.$monthnumeric=='7', '1', '0'),
August = ifelse(.$monthnumeric=='8', '1', '0'),
Sept = ifelse(.$monthnumeric=='9', '1', '0'),
Oct = ifelse(.$monthnumeric=='10', '1', '0'),
Nov = ifelse(.$monthnumeric=='11', '1', '0'),
Dec = ifelse(.$monthnumeric=='12', '1', '0'))
str(Covid_monthlyae_glmwhenmonth)
Covid_monthlyae_glmwhenmonth <- Covid_monthlyae_glmwhenmonth %>%
select(date, Jan, Feb, March, April, May, June, July, August, Sept, Oct, Nov, Dec)
#To change from character to numeric
Covid_monthlyae_glmwhenmonth$Jan <- as.numeric(Covid_monthlyae_glmwhenmonth$Jan)
Covid_monthlyae_glmwhenmonth$Feb <- as.numeric(Covid_monthlyae_glmwhenmonth$Feb)
Covid_monthlyae_glmwhenmonth$March <- as.numeric(Covid_monthlyae_glmwhenmonth$March)
Covid_monthlyae_glmwhenmonth$April <- as.numeric(Covid_monthlyae_glmwhenmonth$April)
Covid_monthlyae_glmwhenmonth$May <- as.numeric(Covid_monthlyae_glmwhenmonth$May)
Covid_monthlyae_glmwhenmonth$June <- as.numeric(Covid_monthlyae_glmwhenmonth$June)
Covid_monthlyae_glmwhenmonth$July <- as.numeric(Covid_monthlyae_glmwhenmonth$July)
Covid_monthlyae_glmwhenmonth$August <- as.numeric(Covid_monthlyae_glmwhenmonth$August)
Covid_monthlyae_glmwhenmonth$Sept <- as.numeric(Covid_monthlyae_glmwhenmonth$Sept)
Covid_monthlyae_glmwhenmonth$Oct <- as.numeric(Covid_monthlyae_glmwhenmonth$Oct)
Covid_monthlyae_glmwhenmonth$Nov <- as.numeric(Covid_monthlyae_glmwhenmonth$Nov)
Covid_monthlyae_glmwhenmonth$Dec <- as.numeric(Covid_monthlyae_glmwhenmonth$Dec)
#Combining all the proportions data into one table using merge
#Covid_monthlyae_glmdemographicsage
#Covid_monthlyae_glmdemographicssex
#Covid_monthlyae_glmdemographicsdeprivation
#Covid_monthlyae_glmdemographicsdepttype
#Covid_monthlyae_glmdemographicsHB
#Covid_monthlyae_glmdemographicsCoviddate_all
#Covid_monthlyae_glmwhenday
#Covid_monthlyae_glmwhenhour
#Covid_monthlyae_glmwhenmonth
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmdemographicsCoviddate_all, Covid_monthlyae_glmdemographicsdepttype, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicssex, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicsage, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicsdeprivation, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmwhenday, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmwhenmonth, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmwhenhour, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicsHB, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicssin_term, by=c("date"))
Covid_monthlyae_glmprop <- merge(Covid_monthlyae_glmprop, Covid_monthlyae_glmdemographicscos_term, by=c("date"))
