str(arrivalhrScotEDwkdy)
ggplot(arrivalhrScotEDwkdy, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 6500),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish emergency department \nattendances by weekday arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
arrivalhrScotEDwkdyheatmap1 <- ggplot(arrivalhrScotEDwkdy, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 6500),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish emergency department \nattendances by weekday arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
#axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
save_plot("Output/arrivalhrScotEDwkdyheatmap1.svg", fig = arrivalhrScotEDwkdyheatmap1, width = 17, height = 18)
ggplot(arrivalhrScotMIUOtherwkdy, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 6500),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish minor injuries and other units attendances by \nweekday arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
arrivalhrScotMIUOtherwkdyscaledheatmap1 <- ggplot(arrivalhrScotMIUOtherwkdy, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 6500),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish minor injuries and other units attendances by \nweekday arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
#axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
save_plot("Output/arrivalhrScotMIUOtherwkdyscaledheatmap1.svg", fig = arrivalhrScotMIUOtherwkdyscaledheatmap1, width = 17, height = 18)
arrivalhrScotMIUOtherwkdyheatmap1 <- ggplot(arrivalhrScotMIUOtherwkdy, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish minor injuries and other units attendances by \nweekday arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
#axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
save_plot("Output/arrivalhrScotMIUOtherwkdyheatmap1.svg", fig = arrivalhrScotMIUOtherwkdyheatmap1, width = 17, height = 18)
ggplot(arrivalhrScotEDwknd, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 3000),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish emergency department attendances by weekend \narrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
arrivalhrScotEDwkndheatmap1 <- ggplot(arrivalhrScotEDwknd, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 3000),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish emergency department attendances by weekend \narrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
#axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
save_plot("Output/arrivalhrScotEDwkndheatmap1.svg", fig = arrivalhrScotEDwkndheatmap1, width = 17, height = 18)
ggplot(arrivalhrScotMIUOtherwknd, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 3000),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish minor injuries and other units attendances by \nweekend arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
arrivalhrScotMIUOtherwkndscaledheatmap1 <- ggplot(arrivalhrScotMIUOtherwknd, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
limits=c(0, 3000),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish minor injuries and other units attendances by \nweekend arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
#axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
save_plot("Output/arrivalhrScotMIUOtherwkndscaledheatmap1.svg", fig = arrivalhrScotMIUOtherwkndscaledheatmap1, width = 17, height = 18)
ggplot(arrivalhrScotMIUOtherwknd, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish minor injuries and other units attendances by \nweekend arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
arrivalhrScotMIUOtherwkndheatmap1 <- ggplot(arrivalhrScotMIUOtherwknd, aes(x = Month, y = Hour, fill = Attendances)) +
geom_tile(
width=50 #to remove the vertical white lines
) +
scale_fill_gradientn(colors = colorRampPalette(c("blue","green", "yellow", "red"))(1000),
guide_legend(title = "Attendances")) +
scale_y_discrete(limits = rev(levels(as.factor(arrivalhrScotEDwkdy$Hour))))+
labs(
#title = "Heatmap of Scottish minor injuries and other units attendances by \nweekend arrival hour",
x = "Year",
y = "Arrival hour")+
#theme_minimal() +
theme(axis.ticks = element_line())
#axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
save_plot("Output/arrivalhrScotMIUOtherwkndheatmap1.svg", fig = arrivalhrScotMIUOtherwkndheatmap1, width = 17, height = 18)
ggplot(data=ae_4HwaitingbyHB, aes(x=MonthEndingDate, y=PercentageWithin4HoursAll, group=NHSBoardName)) +
geom_line() +
geom_vline(xintercept = as.Date("2020-01-01"), color="orange", linewidth=.5)+
geom_hline(yintercept= c(78,95), color="orange", size=.5) +
annotate(geom="text", x=as.Date("2008-04-30"), y=94.5, size=3,
label="95% target") +
annotate(geom="text", x=as.Date("2008-04-30"), y=79.5, size=3,
label="78% target") +
labs(
#title = "Percentage A&E attendances seen within 4 hours \nby Scottish Health Boards",
x = "Year",
y = "Percentage A&E attendances seen within 4 hours")
ggplot(data=ae_4HwaitingbyHB, aes(x=MonthEndingDate, y=PercentageWithin4HoursAll, group=NHSBoardName)) +
geom_line() +
geom_vline(xintercept = as.Date("2020-01-01"), color="orange", linewidth=.5)+
geom_hline(yintercept= c(78,95), color="orange", size=.5) +
annotate(geom="text", x=as.Date("2008-04-30"), y=94.5, size=3,
label="95% target") +
annotate(geom="text", x=as.Date("2008-04-30"), y=77.5, size=3,
label="78% target") +
labs(
#title = "Percentage A&E attendances seen within 4 hours \nby Scottish Health Boards",
x = "Year",
y = "Percentage A&E attendances seen within 4 hours")
ggplot(data=ae_4HwaitingbyHB, aes(x=MonthEndingDate, y=PercentageWithin4HoursAll, group=NHSBoardName)) +
geom_line() +
geom_vline(xintercept = as.Date("2020-01-01"), color="orange", linewidth=.5)+
geom_hline(yintercept= c(78,95), color="orange", size=.5) +
annotate(geom="text", x=as.Date("2008-04-30"), y=94.0, size=3,
label="95% target") +
annotate(geom="text", x=as.Date("2008-04-30"), y=77.0, size=3,
label="78% target") +
labs(
#title = "Percentage A&E attendances seen within 4 hours \nby Scottish Health Boards",
x = "Year",
y = "Percentage A&E attendances seen within 4 hours")
fourHwaitingbyHB_nocolour <- ggplot(data=ae_4HwaitingbyHB, aes(x=MonthEndingDate, y=PercentageWithin4HoursAll, group=NHSBoardName)) +
geom_line() +
geom_vline(xintercept = as.Date("2020-01-01"), color="orange", linewidth=.5)+
geom_hline(yintercept= c(78,95), color="orange", size=.5) +
annotate(geom="text", x=as.Date("2008-04-30"), y=94.0, size=3,
label="95% target") +
annotate(geom="text", x=as.Date("2008-04-30"), y=77.0, size=3,
label="78% target") +
labs(
#title = "Percentage A&E attendances seen within 4 hours \nby Scottish Health Boards",
x = "Year",
y = "Percentage A&E attendances seen within 4 hours")
save_plot("Output/fourHwaitingbyHB_nocolour.svg", fig = fourHwaitingbyHB_nocolour, width = 14, height = 12)
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
View(sexagesimddayhourdepttypeHBmonth_proportions)
View(ae_byboard2018to2023_proportionsnewdate)
View(Glasgow_rates2018to2023)
View(Glasgow_Updatespopulation2018to2023)
View(ae_byboard2018to2023)
View(Orkney_rates2018to2023)
#Orkney attendance rates 2018-2023
Orkney_rates2018to2023 <- ae_byboard2018to2023 %>% filter(NHSBoardName=="NHS Orkney") %>% mutate(Month = ae_byboard2018to2023_proportionsnewdate$Month)
View(Orkney_rates2018to2023)
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% select(-MonthEndingDate)
View(Orkney_rates2018to2023)
#Orkney attendance rates 2018-2023
Orkney_rates2018to2023 <- ae_byboard2018to2023 %>% filter(NHSBoardName=="NHS Orkney") %>% mutate(Month = ae_byboard2018to2023_proportionsnewdate$Month)
View(Orkney_rates2018to2023)
View(Orkney_rates2018to2023)
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% select(-MonthEndingDate, -Year)
View(Orkney_rates2018to2023)
View(Orkney_rates2018to2023)
#Adding a new column for year
Orkney_rates2018to2023$Year <- as.numeric(format(Orkney_rates2018to2023$Month, "%Y"))
View(Orkney_rates2018to2023)
#Getting population estimate data for 2018-2023
Orkney_Updatespopulation2018to2023 <- HBUpdatespopulation_estimate_HBname %>% filter(HBName=="NHS Orkney")
Orkney_Updatespopulation2018to2023 <- Orkney_Updatespopulation2018to2023 %>% filter(Year=="2018"|Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022"|Year=="2023")
#combining the dataframe for attendance and Orkney population in 2018-2023
Orkney_rates2018to2023 <- merge(Orkney_rates2018to2023, Orkney_Updatespopulation2018to2023, by=c("Year"))
View(Orkney_rates2018to2023)
#adding a new column containing the attendance rate
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% mutate(attendancerate = Attendances/AllAges)
#removing unnecessary columns
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% select(-HBName, -HB, -Sex)
View(Orkney_rates2018to2023)
#creating a dataframe for the attendance rate predicted for Aug 2023 and Sept 2023 using model based on time
OrkneyAug23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 589, Month = "2023-08-01", AllAges= 22731, attendancerate=0.0259118)
OrkneySept23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 591, Month = "2023-09-01", AllAges= 22731, attendancerate=0.0259997)
OrkneyOct23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 593, Month = "2023-10-01", AllAges= 22731, attendancerate=0.0260877)
OrkneyNov23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 595, Month = "2023-11-01", AllAges= 22731, attendancerate=0.0261757)
OrkneyDec23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 597, Month = "2023-12-01", AllAges= 22731, attendancerate=0.0262637)
OrkneyJan24Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 599, Month = "2024-01-01", AllAges= 22731, attendancerate=0.0263517)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyAug23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneySept23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyOct23Time_attendancerate)
str(Orkney_rates2018to2023)
str(OrkneyAug23Time_attendancerate)
ggplot(data=Orkney_rates2018to2023, aes(x=Month, y=attendancerate))+
geom_point()+
geom_line()+
labs(x="Year",
y="Attendance rate")
OrkneyAug23Time_attendancerate$Month <- as.Date(OrkneyAug23Time_attendancerate$Month)
OrkneyAug23Time_attendancerate$Month <- as.Date(format(OrkneyAug23Time_attendancerate$Month))
str(ae_byboard2018to2023)
str(ae_byboard2018to2023_proportionsnewdate)
View(Orkney_rates2018to2023)
#creating a dataframe for the attendance rate predicted for Aug 2023 and Sept 2023 using model based on time
OrkneyAug23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 589, Month = "2023-08-01", AllAges= 22731, attendancerate=0.0259118)
OrkneySept23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 591, Month = "2023-09-01", AllAges= 22731, attendancerate=0.0259997)
OrkneyOct23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 593, Month = "2023-10-01", AllAges= 22731, attendancerate=0.0260877)
OrkneyNov23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 595, Month = "2023-11-01", AllAges= 22731, attendancerate=0.0261757)
OrkneyDec23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 597, Month = "2023-12-01", AllAges= 22731, attendancerate=0.0262637)
OrkneyJan24Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 599, Month = "2024-01-01", AllAges= 22731, attendancerate=0.0263517)
View(Orkney_rates2018to2023)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyAug23Time_attendancerate)
str(Orkney_rates2018to2023)
Orkney_rates2018to2023$Month <- as.character(Orkney_rates2018to2023$Month)
str(Orkney_rates2018to2023)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyAug23Time_attendancerate)
#removing unnecessary columns
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% select(-Year)
View(Orkney_rates2018to2023)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyAug23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneySept23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyOct23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyNov23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyDec23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyJan24Time_attendancerate)
str(Orkney_rates2018to2023)
View(Orkney_rates2018to2023)
#Orkney attendance rates 2018-2023
#adding new Month column based on assumption that end of one month is first day of next month
Orkney_rates2018to2023 <- ae_byboard2018to2023 %>% filter(NHSBoardName=="NHS Orkney") %>% mutate(Month = ae_byboard2018to2023_proportionsnewdate$Month)
#removing the Month ending dateand year column
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% select(-MonthEndingDate, -Year)
#Adding a new column for year
Orkney_rates2018to2023$Year <- as.numeric(format(Orkney_rates2018to2023$Month, "%Y"))
#Getting population estimate data for 2018-2023
Orkney_Updatespopulation2018to2023 <- HBUpdatespopulation_estimate_HBname %>% filter(HBName=="NHS Orkney")
Orkney_Updatespopulation2018to2023 <- Orkney_Updatespopulation2018to2023 %>% filter(Year=="2018"|Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022"|Year=="2023")
#combining the dataframe for attendance and Orkney population in 2018-2023
Orkney_rates2018to2023 <- merge(Orkney_rates2018to2023, Orkney_Updatespopulation2018to2023, by=c("Year"))
#adding a new column containing the attendance rate
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% mutate(attendancerate = Attendances/AllAges)
#removing unnecessary columns
Orkney_rates2018to2023 <- Orkney_rates2018to2023 %>% select(-HBName, -HB, -Sex, -Year)
#creating a dataframe for the attendance rate predicted for Aug 2023 and Sept 2023 using model based on time
OrkneyAug23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 589, Month = "2023-08-01", AllAges= 22731, attendancerate=0.0259118)
OrkneySept23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 591, Month = "2023-09-01", AllAges= 22731, attendancerate=0.0259997)
OrkneyOct23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 593, Month = "2023-10-01", AllAges= 22731, attendancerate=0.0260877)
OrkneyNov23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 595, Month = "2023-11-01", AllAges= 22731, attendancerate=0.0261757)
OrkneyDec23Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 597, Month = "2023-12-01", AllAges= 22731, attendancerate=0.0262637)
OrkneyJan24Time_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 599, Month = "2024-01-01", AllAges= 22731, attendancerate=0.0263517)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyAug23Time_attendancerate)
View(Orkney_rates2018to2023)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneySept23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyOct23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyNov23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyDec23Time_attendancerate)
Orkney_rates2018to2023 <- rbind(Orkney_rates2018to2023, OrkneyJan24Time_attendancerate)
str(Orkney_rates2018to2023)
#changing attendancerate to a numeric
Orkney_rates2018to2023$attendancerate <- as.numeric(Orkney_rates2018to2023$attendancerate)
str(Orkney_rates2018to2023)
View(Orkney_rates2018to2023)
View(Glasgow_rates2018to2023)
#Glasgow attendance rates 2018-2023
#adding new Month column based on assumption that end of one month is first day of next month
Glasgow_rates2018to2023 <- ae_byboard2018to2023 %>% filter(NHSBoardName=="NHS Greater Glasgow & Clyde") %>% mutate(Month = ae_byboard2018to2023_proportionsnewdate$Month)
#removing the Month ending date and year column
Glasgow_rates2018to2023 <- Glasgow_rates2018to2023 %>% select(-MonthEndingDate, -Year)
#Adding a new column for year
Glasgow_rates2018to2023$Year <- as.numeric(format(Glasgow_rates2018to2023$Month, "%Y"))
#Getting population estimate data for 2018-2023
Glasgow_Updatespopulation2018to2023 <- HBUpdatespopulation_estimate_HBname %>% filter(HBName=="NHS Greater Glasgow and Clyde")
Glasgow_Updatespopulation2018to2023 <- Glasgow_Updatespopulation2018to2023 %>% filter(Year=="2018"|Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022"|Year=="2023")
#combining the dataframe for attendance and population in 2018-2023
Glasgow_rates2018to2023 <- merge(Glasgow_rates2018to2023, Glasgow_Updatespopulation2018to2023, by=c("Year"))
#adding a new column containing the attendance rate
Glasgow_rates2018to2023 <- Glasgow_rates2018to2023 %>% mutate(attendancerate = Attendances/AllAges)
#removing unnecessary columns
Glasgow_rates2018to2023 <- Glasgow_rates2018to2023 %>% select(-HBName, -HB, -Sex, -Year)
#creating a dataframe for the attendance rate predicted for Aug 2023 and Sept 2023
GlasgowAug23Time_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 35591, Month = "2023-08-01", AllAges= 1192485, attendancerate=0.0298461)
GlasgowSept23Time_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 35712, Month = "2023-09-01", AllAges= 1192485, attendancerate=0.0299475)
GlasgowOct23Time_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 35829, Month = "2023-10-01", AllAges= 1192485, attendancerate=0.0300457)
GlasgowNov23Time_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 35951, Month = "2023-11-01", AllAges= 1192485, attendancerate=0.0301480)
GlasgowDec23Time_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 36069, Month = "2023-12-01", AllAges= 1192485, attendancerate=0.0302469)
GlasgowJan24Time_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 36191, Month = "2024-01-01", AllAges= 1192485, attendancerate=0.0303492)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Glasgow_rates2018to2023 <- rbind(Glasgow_rates2018to2023, GlasgowAug23Time_attendancerate)
Glasgow_rates2018to2023 <- rbind(Glasgow_rates2018to2023, GlasgowSept23Time_attendancerate)
Glasgow_rates2018to2023 <- rbind(Glasgow_rates2018to2023, GlasgowOct23Time_attendancerate)
Glasgow_rates2018to2023 <- rbind(Glasgow_rates2018to2023, GlasgowNov23Time_attendancerate)
Glasgow_rates2018to2023 <- rbind(Glasgow_rates2018to2023, GlasgowDec23Time_attendancerate)
Glasgow_rates2018to2023 <- rbind(Glasgow_rates2018to2023, GlasgowJan24Time_attendancerate)
str(Glasgow_rates2018to2023)
#changing attendancerate to a numeric
Glasgow_rates2018to2023$attendancerate <- as.numeric(Glasgow_rates2018to2023$attendancerate)
View(Glasgow_rates2018to2023)
Glasgow_predict_rates2018to2023 <- ggplot(data=Glasgow_rates2018to2023, aes(x=Month, y=attendancerate))+
geom_point()+
geom_line()+
labs(x="Year",
y="Attendance rate")
save_plot("Output/Glasgow_predict_rates2018to2023.svg", fig=Glasgow_predict_rates2018to2023, width=14, height=12)
#Orkney and Glasgow in the same graph
Orkney_Glasgow_rates2018to2023 <- rbind(Glasgow_rates2018to2023, Orkney_rates2018to2023)
ggplot(data=Orkney_Glasgow_rates2018to2023, aes(x=Month, y=attendancerate, ggroup=NHSBoardName, color=NHSBoardName))+
geom_point()+
geom_line()+
labs(x="Year",
y="Attendance rate",
col="NHS Board Name")
Orkney_Glasgow_predict_rates2018to2023 <- ggplot(data=Orkney_Glasgow_rates2018to2023, aes(x=Month, y=attendancerate, ggroup=NHSBoardName, color=NHSBoardName))+
geom_point()+
geom_line()+
labs(x="Year",
y="Attendance rate",
col="NHS Board Name")
save_plot("Output/Orkney_Glasgow_predict_rates2018to2023.svg", fig=Orkney_Glasgow_predict_rates2018to2023, width=14, height=12)
Orkney_Glasgow_predict_rates2018to2023 <- ggplot(data=Orkney_Glasgow_rates2018to2023, aes(x=Month, y=attendancerate, ggroup=NHSBoardName, color=NHSBoardName))+
geom_point()+
geom_line()+
geom_vline(xintercept = as.Date("2023-08-01"), color="orange", linewidth=.5)+
annotate(geom="text", x=as.Date("2023-03-01"), y=0.0325, size=3, label="Actual")+
annotate(geom="text", x=as.Date("2024-01-01"), y=0.0325, size=3, label="Predicted")+
geom_segment(aes(x=as.Date("2023-06-01"), y=0.0335, xend = as.Date("2022-12-01"), yend = 0.0335), arrow=arrow(length = unit(0.3, 'cm')), color='black')+
geom_segment(aes(x=as.Date("2023-10-01"), y=0.0335, xend = as.Date("2024-04-01"), yend = 0.0335), arrow=arrow(length = unit(0.3, 'cm')), color='black')+#annotate(geom="text", x=as.Date("2023-03-01"), y=0.0340, size=3, label= sprintf('\u2191'))+
labs(x="Year",
y="Attendance rate",
col="NHS Board Name")
save_plot("Output/Orkney_Glasgow_predict_rates2018to2023vline.svg", fig=Orkney_Glasgow_predict_rates2018to2023, width=18, height=12)
Orkney_predict_rates2018to2023 <- ggplot(data=Orkney_rates2018to2023, aes(x=Month, y=attendancerate))+
geom_point()+
geom_line()+
labs(x="Year",
y="Attendance rate")
save_plot("Output/Orkney_predict_rates2018to2023.svg", fig=Orkney_predict_rates2018to2023, width=14, height=12)
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(scales)
library(sjPlot)
#_________________________Orkney and Glasgow in the same graph for model based on month
#Orkney attendance rates 2018-2023
#adding new Month column based on assumption that end of one month is first day of next month
Orkney_rates2018to2023month <- ae_byboard2018to2023 %>% filter(NHSBoardName=="NHS Orkney") %>% mutate(Month = ae_byboard2018to2023_proportionsnewdate$Month)
#removing the Month ending dateand year column
Orkney_rates2018to2023month <- Orkney_rates2018to2023month %>% select(-MonthEndingDate, -Year)
#Adding a new column for year
Orkney_rates2018to2023month$Year <- as.numeric(format(Orkney_rates2018to2023month$Month, "%Y"))
#Getting population estimate data for 2018-2023
Orkney_Updatespopulation2018to2023month <- HBUpdatespopulation_estimate_HBname %>% filter(HBName=="NHS Orkney")
Orkney_Updatespopulation2018to2023month <- Orkney_Updatespopulation2018to2023month %>% filter(Year=="2018"|Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022"|Year=="2023")
#combining the dataframe for attendance and Orkney population in 2018-2023
Orkney_rates2018to2023month <- merge(Orkney_rates2018to2023month, Orkney_Updatespopulation2018to2023month, by=c("Year"))
#adding a new column containing the attendance rate
Orkney_rates2018to2023month <- Orkney_rates2018to2023month %>% mutate(attendancerate = Attendances/AllAges)
#removing unnecessary columns
Orkney_rates2018to2023month <- Orkney_rates2018to2023month %>% select(-HBName, -HB, -Sex, -Year)
#creating a dataframe for the attendance rate predicted for Aug 2023 and Sept 2023 using model based on month
OrkneyAug23Month_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 465, Month = "2023-08-01", AllAges= 22731, attendancerate=0.0204566)
OrkneySept23Month_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 501, Month = "2023-09-01", AllAges= 22731, attendancerate=0.0220404)
OrkneyOct23Month_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 544, Month = "2023-10-01", AllAges= 22731, attendancerate=0.0239321)
OrkneyNov23Month_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 424, Month = "2023-11-01", AllAges= 22731, attendancerate=0.0186529)
OrkneyDec23Month_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 306, Month = "2023-12-01", AllAges= 22731, attendancerate=0.0134618)
OrkneyJan24Month_attendancerate <- c(NHSBoardName = "NHS Orkney", Attendances = 400, Month = "2024-01-01", AllAges= 22731, attendancerate=0.0175971)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Orkney_rates2018to2023month <- rbind(Orkney_rates2018to2023month, OrkneyAug23Month_attendancerate)
Orkney_rates2018to2023month <- rbind(Orkney_rates2018to2023month, OrkneySept23Month_attendancerate)
Orkney_rates2018to2023month <- rbind(Orkney_rates2018to2023month, OrkneyOct23Month_attendancerate)
Orkney_rates2018to2023month <- rbind(Orkney_rates2018to2023month, OrkneyNov23Month_attendancerate)
Orkney_rates2018to2023month <- rbind(Orkney_rates2018to2023month, OrkneyDec23Month_attendancerate)
Orkney_rates2018to2023month <- rbind(Orkney_rates2018to2023month, OrkneyJan24Month_attendancerate)
str(Orkney_rates2018to2023)
#changing attendancerate to a numeric
Orkney_rates2018to2023month$attendancerate <- as.numeric(Orkney_rates2018to2023month$attendancerate)
str(Orkney_rates2018to2023)
#Glasgow attendance rates 2018-2023
#adding new Month column based on assumption that end of one month is first day of next month
Glasgow_rates2018to2023month <- ae_byboard2018to2023 %>% filter(NHSBoardName=="NHS Greater Glasgow & Clyde") %>% mutate(Month = ae_byboard2018to2023_proportionsnewdate$Month)
#removing the Month ending date and year column
Glasgow_rates2018to2023month <- Glasgow_rates2018to2023month %>% select(-MonthEndingDate, -Year)
#Adding a new column for year
Glasgow_rates2018to2023month$Year <- as.numeric(format(Glasgow_rates2018to2023month$Month, "%Y"))
#Getting population estimate data for 2018-2023
Glasgow_Updatespopulation2018to2023month <- HBUpdatespopulation_estimate_HBname %>% filter(HBName=="NHS Greater Glasgow and Clyde")
Glasgow_Updatespopulation2018to2023month <- Glasgow_Updatespopulation2018to2023month %>% filter(Year=="2018"|Year=="2019"|Year=="2020"|Year=="2021"|Year=="2022"|Year=="2023")
#combining the dataframe for attendance and population in 2018-2023
Glasgow_rates2018to2023month <- merge(Glasgow_rates2018to2023month, Glasgow_Updatespopulation2018to2023month, by=c("Year"))
#adding a new column containing the attendance rate
Glasgow_rates2018to2023month <- Glasgow_rates2018to2023month %>% mutate(attendancerate = Attendances/AllAges)
#removing unnecessary columns
Glasgow_rates2018to2023month <- Glasgow_rates2018to2023month %>% select(-HBName, -HB, -Sex, -Year)
#creating a dataframe for the attendance rate predicted for Aug 2023 and Sept 2023 using  model based on month
GlasgowAug23Month_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 27556, Month = "2023-08-01", AllAges= 1192485, attendancerate=0.0231080)
GlasgowSept23Month_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 30279, Month = "2023-09-01", AllAges= 1192485, attendancerate=0.0253915)
GlasgowOct23Month_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 32849, Month = "2023-10-01", AllAges= 1192485, attendancerate=0.0275467)
GlasgowNov23Month_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 25608, Month = "2023-11-01", AllAges= 1192485, attendancerate=0.0214745)
GlasgowDec23Month_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 18470, Month = "2023-12-01", AllAges= 1192485, attendancerate=0.0154887)
GlasgowJan24Month_attendancerate <- c(NHSBoardName = "NHS Greater Glasgow & Clyde", Attendances = 24004, Month = "2024-01-01", AllAges= 1192485, attendancerate=0.0201294)
#Combining the dataframe containing actual rates with the prediction for Sept and Aug 2023
Glasgow_rates2018to2023month <- rbind(Glasgow_rates2018to2023month, GlasgowAug23Month_attendancerate)
Glasgow_rates2018to2023month <- rbind(Glasgow_rates2018to2023month, GlasgowSept23Month_attendancerate)
Glasgow_rates2018to2023month <- rbind(Glasgow_rates2018to2023month, GlasgowOct23Month_attendancerate)
Glasgow_rates2018to2023month <- rbind(Glasgow_rates2018to2023month, GlasgowNov23Month_attendancerate)
Glasgow_rates2018to2023month <- rbind(Glasgow_rates2018to2023month, GlasgowDec23Month_attendancerate)
Glasgow_rates2018to2023month <- rbind(Glasgow_rates2018to2023month, GlasgowJan24Month_attendancerate)
str(Glasgow_rates2018to2023)
#changing attendancerate to a numeric
Glasgow_rates2018to2023month$attendancerate <- as.numeric(Glasgow_rates2018to2023month$attendancerate)
#Orkney and Glasgow in the same graph for model based on time
Orkney_Glasgow_rates2018to2023month <- rbind(Glasgow_rates2018to2023month, Orkney_rates2018to2023month)
Orkney_Glasgow_predict_rates2018to2023month <- ggplot(data=Orkney_Glasgow_rates2018to2023month, aes(x=Month, y=attendancerate, ggroup=NHSBoardName, color=NHSBoardName))+
geom_point()+
geom_line()+
labs(x="Year",
y="Attendance rate",
col="NHS Board Name")
save_plot("Output/Orkney_Glasgow_predict_rates2018to2023month.svg", fig=Orkney_Glasgow_predict_rates2018to2023month, width=14, height=12)
Orkney_Glasgow_predict_rates2018to2023month <- ggplot(data=Orkney_Glasgow_rates2018to2023month, aes(x=Month, y=attendancerate, ggroup=NHSBoardName, color=NHSBoardName))+
geom_point()+
geom_line()+
geom_vline(xintercept = as.Date("2023-08-01"), color="orange", linewidth=.5)+
annotate(geom="text", x=as.Date("2023-03-01"), y=0.0325, size=3, label="Actual")+
annotate(geom="text", x=as.Date("2024-01-01"), y=0.0325, size=3, label="Predicted")+
geom_segment(aes(x=as.Date("2023-06-01"), y=0.0335, xend = as.Date("2022-12-01"), yend = 0.0335), arrow=arrow(length = unit(0.3, 'cm')), color='black')+
geom_segment(aes(x=as.Date("2023-10-01"), y=0.0335, xend = as.Date("2024-04-01"), yend = 0.0335), arrow=arrow(length = unit(0.3, 'cm')), color='black')+#annotate(geom="text", x=as.Date("2023-03-01"), y=0.0340, size=3, label= sprintf('\u2191'))+
labs(x="Year",
y="Attendance rate",
col="NHS Board Name")
save_plot("Output/Orkney_Glasgow_predict_rates2018to2023vlinemonth.svg", fig=Orkney_Glasgow_predict_rates2018to2023month, width=18, height=12)
